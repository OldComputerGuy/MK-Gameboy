*********************************************************************************         ANIMATION PLAYER ROUTINES AND MOVEMENT CONTROL PROGRAMS*************************************************************************************************************************      ANIMATION COMMAND EQUATES****************************************NUM		= #FF    		EQUDEC	ANIEND				EQUDEC	ANIFLIP				EQUDEC	ANIOFF				EQUDEC	AJUMP				EQUDEC	ANIWAIT				EQUDEC	ANIHIT				EQUDEC	ANIFLAG				EQUDEC	ANISIGNAL			EQUDEC	ANI_IF				EQUDEC	ANISET				EQUDEC	ANIMOVE	 			EQUDEC	ANI_IFHIT 		EQUDEC	ANI_LOOP			EQUDEC	ANISETLOOP		EQUDEC	ANI_CALL			EQUDEC	ANISETVEL			EQUDEC	ANIMEMFRM		EQUDEC	ANIWORDFRM		EQUDEC	ANILINKSPR		EQUDEC	ANISETMEM		EQUDEC	ANISOUND		EQUDEC	HOLDFRAME		LASTANICOMMAND	EQU	HOLDFRAME*****************************************          COPY HL TO ANINBASE*           HL = PLAYBUF1 OR 2****************************************GETSPR		LD	C,<ANIMBASE		PUSH	HL		DO	BUFLEN		LD	A,(HLI)		LD	(C),A		INC	C		LOOP		POP	HL		RET*****************************************          COPY ANINBASE TO HL*           HL = PLAYBUF1 OR 2****************************************PUTSPR		LD	C,<ANIMBASE		PUSH	HL		DO	BUFLEN		LD	A,(C)		LD	(HLI),A		INC	C		LOOP		POP	HL		RET*****************************************	       GET SPRBUF*	       ~~~~~~~~~~*	   A = BUFFER NUMBER*	   E = START VARIABLE**OUT:  DE POINTS TO OTHER BUFFER****************************************GETSPRBUF	PUSH	HL		LD	D,0		LD	HL,SPRBUF		ADD	HL,DE		AND	A		JP	Z,@END		LD	DE,BUFLEN@LOOP		ADD	HL,DE		DEC	A		JP	NZ,@LOOP@END		LD	E,L		LD	D,H		POP	HL		RET*****************************************	    CLEAR ALL SPRITES	****************************************CLRSPR		LD	HL,SPRBUF		LD	B,4		;MAXUSED	CLRSPR2		CALL	GETSPR		;GET THE SPRITE		STX	SEQADDH,#FF	;IF SEQADDH=#FF THEN SPRITE NOT CALLED		STX	MANSPRH,#FF	;SWITCH OFF MANAUL SPRITES		CALL	PUTSPR		;STORE THE SPRITE		LD	DE,BUFLEN		ADD	HL,DE		;ADD BUFFER LENGHT		DJNZ	CLRSPR2		;LOOP MAX SPR TIMES		RET*****************************************       PRINT SPRITES IN ORDER****************************************ALLSPRS		LD	A,(PRIORITY)		AND	A		JP	NZ,SWAPPRIOR		SPR	0		LD	B,2		LD	C,%00000001@LOOP		PUSH	BC		PUSH	HL		LD	A,C		LD	(SPRNUMBIT),A		CALL	GETSPR		LDX	A,SEQADDH		CP	#FF		JP	Z,@NEXT		LDX	A,FLAGS		AND	DISABLE		JP	NZ,@NEXT		CALL	SETDISP		CALL	DISP_A_SPR		CALL	DISP_LINK_SPR@NEXT		POP	HL		CALL	PUTSPR		POP	BC		RLC	C		LD	DE,BUFLEN		ADD	HL,DE		DJNZ	@LOOP		RET*****************************************   PRINT SPRITES INVERTED PRIORITY****************************************SWAPPRIOR	SPR	1		LD	B,2		LD	C,%00000010@LOOP		LD	A,C		LD	(SPRNUMBIT),A		PUSH	BC		PUSH	HL				CALL	GETSPR		LDX	A,SEQADDH		CP	#FF		JP	Z,@NEXT		LDX	A,FLAGS		AND	DISABLE		JP	NZ,@NEXT		CALL	SETDISP		CALL	DISP_A_SPR		CALL	DISP_LINK_SPR@NEXT		POP	HL		CALL	PUTSPR		POP	BC		RRC	C		LD	DE,-BUFLEN		ADD	HL,DE		DJNZ	@LOOP		RET*****************************************         PRINT EXTRA SPRITES****************************************EXTRASPRS	SPR	2		LD	B,2		LD	C,%00000100@LOOP		PUSH	BC		PUSH	HL		LD	A,C		LD	(SPRNUMBIT),A		CALL	GETSPR		LDX	A,SEQADDH		CP	#FF		JP	Z,@NEXT		LDX	A,FLAGS		AND	DISABLE		JP	NZ,@NEXT		CALL	SETDISP		CALL	DISP_A_SPR		CALL	DISP_LINK_SPR@NEXT		POP	HL		CALL	PUTSPR		POP	BC		RLC	C		LD	DE,BUFLEN		ADD	HL,DE		DJNZ	@LOOP		RET*****************************************	     SET DISP FLAGS****************************************SETDISP		LDX	A,FLAGS2		LD	B,A		AND	%11111110	;SAVE BITS		LD	C,A		LD	A,B		;FLIP BIT IN B		AND	1		LD	B,A		LDX	A,FLAGS		;SET MIRROR FLAGS		OR	C		XOR	B		LD	C,A 		AND	#01		LD	(MIR),A		LD	A,C		;SET MIRROR FLAGS 		RRCA		RRCA		AND	7		;3		LD	(DISPFLAGS),A		LDX	A,FLAGS2		AND	%11100000		STX	FLAGS2,0		RET*****************************************	   ADD SPR BASE NUMBER****************************************SPLAYTAB	DW	LIZPOS		;0 DUMMY FOR CAGE		DW	KANOPOS		;1 		DW	RAIDPOS		;2		DW	KANGPOS		;3			DW	NINJAPOS	;4 SCORPION		DW	NINJAPOS	;5 SUBZERO		DW	LIZPOS		;6		DW	GOROPOS		;7		DW	EMPPOS		;8			DW	WEAPONPOS	;9 WEAPON'S POS		DW	WEAPONPOS	;10 KANO WEAPON		DW	WEAPONPOS	;11 RAIDEN WEAPON		DW	WEAPONPOS	;12 KANG WEAPON		DW	WEAPONPOS	;13 SCORPION WEAPON		DW	WEAPONPOS	;14 SUBZERO WEAPON		DW	WEAPONPOS	;15 LIZ WEAPON		DW	WEAPONPOS	;16 GORO WEAPON		DW	WEAPONPOS	;17 EMPOROR WEAPON		DW	FATALPOS	;18 SOME FATAL FRAMES		DW	FATALPOS	;19 SOME FATAL FRAMES		DW	FATALPOS	;20 SOME FATAL FRAMESDISP_A_SPR	LDX	A,MANBANK		CP	#FF		JP	Z,@WORDFRM		LDW	H,L,MANSPRL		BIT	7,H		;DISPLAY MANUAL SPR		JP	Z,@MANUAL			LDX	E,SBASE		LD	D,0		SLA	E		LD	HL,SPLAYTAB		ADD	HL,DE		LD	A,(HLI)		LD	D,(HL)		LD	E,A		LDX	L,ANIM		LD	H,0		ADD	HL,DE		LDX	C,XCOORD		LDX	B,YCOORD		JP	DISP_SPR@WORDFRM	LDW	H,L,MANSPRL		LDX	C,XCOORD		LDX	B,YCOORD		JP	DISP_SPR@MANUAL		LDX	C,XCOORD		LDX	B,YCOORD		LDX	A,MANBANK		JP	DISP_SPR_ADD*****************************************	  HANDLE SPRITE LINKS****************************************DISP_LINK_SPR	LDW	H,L,LINKL	;HANDLE LINK SPRITE		BIT	7,H		RET	NZ		LDX	A,FLAGS		BIT	MIRRORBIT,A		JP	NZ,@MIRLINK		LDX	C,XCOORD		LDX	A,LINKX		ADD	A,C		LD	C,A		LDX	B,YCOORD		LDX	A,LINKY		ADD	A,B		LD	B,A		JP	DISP_SPR@MIRLINK	LDX	C,XCOORD		LDX	A,LINKX		CPL		INC	A		ADD	A,C		LD	C,A		LDX	B,YCOORD		LDX	A,LINKY		CPL		INC	A		ADD	A,B		LD	B,A		JP	DISP_SPR*****************************************          DO ALL SEQUENCES****************************************ALLSEQS		XOR	A		LD	(SPRNUM),A		SPR	0		LD	B,MAXUSEDALSEQLP		PUSH	BC		PUSH	HL		CALL	GETSPR		CALL	SETKEYS		LDX	A,SEQADDH		CP	#FF		JP	Z,RETADD		LD	HL,RETADD		PUSH	HL		LD	A,1		SETBANK		LDW	H,L,SEQADDL		JP	(HL)RETADD		LD	A,(SPRNUM)		CP	2		CALL	C,SCROLL_BIND		LD	HL,SPRNUM		;GET CURRENT SPRITE NUM		LD	C,(HL)			;IN C		LD	B,0			;MAKE WORD IN BC		INC	(HL)			;SPRNUM = SPRNUM + 1		LD	HL,SPRX0		;HL = BASE TABLE SPRITE X'S		ADD	HL,BC			;POINT TO CORRECT ENTRY		LDX	A,XCOORD		;GET X FOR THIS SPRITE		LD      (HL),A			;STORE ENTRY			POP	HL		CALL	PUTSPR		POP	BC		INC	C		LD	DE,BUFLEN		ADD	HL,DE		DJNZ	ALSEQLP		RET*****************************************	       HIT PRIORITY****************************************HIT_PRIORITY	LD	A,(SPRHIT0)		AND	A		RET	Z		LD	A,(SPRHIT1)		AND	A		RET	Z				LD	A,(WHOHIT0)		CP	_WKANO		JP	NC,@NO		LD	A,(WHOHIT1)		CP	_WKANO		JP	NC,@NO			LD	A,(SPRHIT0)		CP	SEQ_DIVE		JP	Z,@RESHIT1		LD	A,(SPRHIT1)		CP	SEQ_DIVE		JP	Z,@RESHIT0					;IS PLAYER 1 A THREAT@NO		XOR	A		;GET SPR 0		LD	(SPRNUM),A		SPR	0			CALL	GETSPR		CALL	THREAT		JP	NC,@RESHIT1					;IS PLAYER 0 A THREAT		LD	A,1		;GET SPR 1		LD	(SPRNUM),A		SPR	1			CALL	GETSPR		CALL	THREAT		JP	NC,@RESHIT0		CALL	RANDOM		AND	1		JP	Z,@RESHIT1@RESHIT0	XOR	A		LD	(SPRHIT0),A		RET@RESHIT1	XOR	A		LD	(SPRHIT1),A		RET*****************************************          UPDATE ANY COLLISIONS****************************************ALLCOLS		CALL	HIT_PRIORITY		XOR	A		LD	(SPRNUM),A		SPR	0		LD	B,2			;MAXUSED BUF@LOOP		PUSH	BC		PUSH	HL		CALL	GETSPR		LDX	A,SEQADDH		CP	#FF		JP	Z,@NEXT		CALL	COL_UPDATE@NEXT		CALL	DO_X_VEL		CALL	DO_GRAVITY		CALL	SCROLL_BIND		LD	HL,SPRNUM		;GET CURRENT SPRITE NUM		LD	C,(HL)			;IN C		LD	B,0			;MAKE WORD IN BC		INC	(HL)			;SPRNUM = SPRNUM + 1		LD	HL,SPRX0		;HL = BASE TABLE SPRITE X'S		ADD	HL,BC			;POINT TO CORRECT ENTRY		LDX	A,XCOORD		;GET X FOR THIS SPRITE		LD      (HL),A			;STORE ENTRY			POP	HL		CALL	PUTSPR		POP	BC		INC	C		LD	DE,BUFLEN		ADD	HL,DE		DJNZ	@LOOP		RET*****************************************	 SET UP KEYS FOR PLAYER****************************************SETKEYS		LD	A,(CONNECT)		AND	A		JP	Z,@NOCON		LD	A,(MASTER)		AND	A		JP	Z,SLAVEKEYS@NOCON		LD	A,(SPRNUM)		AND	A		JP	Z,@ZERO		LD	A,(INKEYS)		LD	(NEWKEYS),A		LD	A,(INTRIG)		LD	(NEWTRIG),A		RET@ZERO		LD	A,(KEYS)		LD	(NEWKEYS),A		LD	A,(TRIGGER)		LD	(NEWTRIG),A		RET*****************************************	       SLAVE KEYS****************************************SLAVEKEYS	LD	A,(SPRNUM)		AND	A		JP	NZ,@ONE		LD	A,(INKEYS)		LD	(NEWKEYS),A		LD	A,(INTRIG)		LD	(NEWTRIG),A		RET@ONE		LD	A,(KEYS)		LD	(NEWKEYS),A		LD	A,(TRIGGER)		LD	(NEWTRIG),A		RET*****************************************	  INHIBIT X POSITION****************************************XMAX		EQU	63		    ;63XMIN		EQU	3		    ;3INHIBIT_X	LDX	A,XCOORD		BIT	7,A			;IF NEG SET TO 0		JP	NZ,@SET0		CP	XMIN		JP	C,@SET0		CP	XMAX			;IF GREATER THAN 64 THEN 63		RET	C		STX	XCOORD,XMAX-1		RET		@SET0		STX	XCOORD,XMIN		RET*****************************************       INHIBIT TO SCROLL BOUNDRY****************************************SCROLL_BIND	LD	HL,XPOS		LD	A,(HLI)		LD	H,(HL)		LD	L,A		SRL	H		RR	L		SRL	H		RR	L		SRL	H		RR	L		LD	C,L		;C = MIN SCR X		INC	C		INC	C		LDX	A,XCOORD;@@@ ARH PATCH		BIT	7,A		JP	NZ,@BINDMIN;@@@    		SUB	C		JP	C,@BINDMIN		LD	A,C		ADD	A,19		;22 dist across screen		LD	C,A		LDX	A,XCOORD		SUB	C		JP	NC,@BINDMAX				RET@BINDMIN	INC	C		STX	XCOORD,C		RET@BINDMAX	DEC	C		STX	XCOORD,C		RET*****************************************	      BIND X WITH C****************************************		IF	0BIND_X_C	CALL	SETPLAYX		CALL	BIND_X		RET	NC		STX	XCOORD,C		RET*****************************************	    BIND X POSITIONS****************************************BIND_X		LD	A,(SPRX0)		LD	B,A		LD	A,(SPRX1)		SUB	B		BIT	7,A		JP	Z,@NONEG		CPL		INC	A@NONEG		CP	17			;20		JP	NC,@SETCY		OR	A		RET@SETCY		SCF		RET		ENDIF*****************************************      LIMIT PLAYERS TO PLAYFIELD****************************************SETPLAYX	LDX	B,XCOORD		LD	A,(SPRNUM)		AND	A		JP	Z,@ZERO		LD	A,B		LD	(SPRX1),A		RET		@ZERO		LD	A,B		LD	(SPRX0),A		RET		*****************************************	     DO X VELOCITY****************************************DO_X_VEL	LDX	A,XSPD		AND	A		RET	Z		BIT	7,A		JP	Z,@NEGSPD		LD	B,A		SRA	B		SRA	B		LDX	A,XCOORD		LD	C,A		ADD	A,B		STX	XCOORD,A		LDX	A,XSPD		CALL	DEC_VEL		STX	XSPD,A		CALL	SETPLAYX		;CALL	BIND_X		;RET	NC		;STX	XCOORD,C		RET	@NEGSPD		CPL		INC	A		LD	B,A		SRA	B		SRA	B		LDX	A,XCOORD		LD	C,A		SUB	B		STX	XCOORD,A		LDX	A,XSPD		CALL	DEC_VEL		STX	XSPD,A		CALL	SETPLAYX		;CALL	BIND_X		;RET	NC		;STX	XCOORD,C		RET	*****************************************	       DO GRAVITY****************************************DO_GRAVITY	LDX	A,FLAGS2		BIT	GRAVOFFBIT,A		RET	NZ		LDX	A,YSPD		BIT	7,A		JP	NZ,@OK		LDX	A,YCOORD		CP	GROUNDLEVEL			;69		JP	Z,@MAKE5		JP	NC,@MAKE5@OK		LDX	B,YSPD		LDX	A,YCOORD		ADD	A,B		STX	YCOORD,A		BIT	7,A		JP	NZ,@NO		CP	GROUNDLEVEL		JP	NC,@MAKE5		@NO		LDX	A,YSPD		INC	A		STX	YSPD,A		RET	@MAKE5		STX	YCOORD,GROUNDLEVEL		STX	YSPD,0		RET*****************************************	    DEC VELOCITY IN A****************************************DEC_VEL		AND	A		RET	Z		BIT	7,A		JP	NZ,@NEG		DEC	A		RET@NEG		INC	A		RET*****************************************      SET LEFT OR RIGHT VELOCITY****************************************LOR_VEL		PUSH	AF		CALL	WHICH_SIDE		JP	C,@NEG		POP	AF		STX	XSPD,A		RET@NEG		POP	AF		CPL		INC	A		STX	XSPD,A		RET*****************************************            DO SCROLL CALC****************************************CALCSCROLL	LD	A,(LOCKSCROLL)		;DON'T SCROLL IF LOCKED		AND	A		RET	NZ		LD	A,(SPRX0)		LD	B,A		LD	A,(SPRX1)		ADD	A,B		SRA	A		LD	(CENTERX),A		RET*****************************************        GET XPOS OF A SPRITE*	       A = SPRNUM****************************************GETSPRX		LD	C,A		LD	B,0			;MAKE WORD IN BC		LD	HL,SPRX0		;HL = BASE TABLE SPRITE X'S		ADD	HL,BC			;POINT TO CORRECT ENTRY		LD      A,(HL)			;STORE ENTRY		RET				********************************************************************************         ANIMATION PLAYER ROUTINES AND MOVEMENT CONTROL PROGRAMS************************************************************************************************************************* 	      PLAY ANIMS****************************************DO_ANIM		XOR	A		LD	(ANIM_ENDED),A		LD	(ANIM_HIT),A		LDX	A,WAIT		AND	A		JP	Z,NEXTANIM		DEC	A		STX	WAIT,A		RETNEXTANIM	LD	A,ANIMBANK		SETBANK		LDW	D,E,ANIPTRL		;GET ANIM POS IN MEM		LD	A,D			;TEST FOR ANIMS INACTIVE		AND	A		JP	Z,_ANIEND		LD	A,(DE)		CP	LASTANICOMMAND		JP	C,@FRAMESET	    	CP	ANIEND			;ANIMATION HAS ENDED		JP	Z,_ANIEND	    	CP	ANIFLIP			;FLIP NEXT FRAME		JP	Z,_ANIFLIP	    	CP	ANIOFF			;SET NEW OFFSET		JP	Z,_ANIOFF	    	CP	ANIMOVE			;SET NEW OFFSET		JP	Z,_ANIMOVE	    	CP	AJUMP			;JUMP TO ANOTHER ANIM LIST		JP	Z,_ANIJUMP	    	CP	ANIWAIT			;PAUSE AN ANIMATION		JP	Z,_ANIWAIT	    	CP	ANIHIT			;TEST FOR PLAYER COLLISION		JP	Z,_ANIHIT	    	CP	ANISOUND				JP	Z,_ANISOUND	    	CP	ANI_LOOP				JP	Z,_ANI_LOOP	    	CP	ANISETLOOP				JP	Z,_ANISETLOOP	    	CP	ANISET					JP	Z,_ANISET	    	CP	ANI_IF					JP	Z,_ANI_IF	    	CP	ANI_IFHIT   				JP	Z,_ANI_IFHIT	    	CP	ANIFLAG					JP	Z,_ANIFLAG	    	CP	ANISIGNAL				JP	Z,_SIGNAL	    	CP	ANI_CALL				JP	Z,_ANI_CALL	    	CP	ANISETVEL		JP	Z,_ANISETVEL	    	CP	ANIMEMFRM		JP	Z,_ANIMEMFRM	    	CP	ANILINKSPR		JP	Z,_ANILINKSPR	    	CP	ANISETMEM		JP	Z,_ANISETMEM	    	CP	ANIWORDFRM		JP	Z,_ANIWORDFRM	    	CP	HOLDFRAME				JP	Z,@NOSET@FRAMESET	STX	ANIM,A			@NOSET		INC	DE					STW	D,E,ANIPTRLEXITANIM	LD	A,1		SETBANK		RET***************************************** 	     END ANIMATION*	SET ANIMATION NUMBER****************************************_ANIEND		XOR	A			;STOP ALL SEQUENCES		STX	ANIPTRH,A		;SAY ANIM STOPPED		LD	A,1	     		;SAY ANIMEND		LD	(ANIM_ENDED),A		JP	EXITANIMSET_ANI		STX	CURANI,A		LD	L,A			;INDEX INTO ANIMTAB		LD	H,0		ADD	HL,HL			;2 WORDS		ADD	HL,HL		LD	DE,ANIMTAB		ADD	HL,DE		LD	A,ANIMBANK		SETBANK		LD	A,(HLI)		STX	ANIPTRL,A		LD	A,(HLI)		STX	ANIPTRH,A		LD	A,1		SETBANK		XOR	A			;ANIM STARTED		STX	WAIT,A		;LD	(ANIM_ENDED),A		;LD	(ANIM_HIT),A		;CLEAR HIT FLAG		RET*****************************************	SET ANIMATION TO HL****************************************SET_ANI_HL	STX	CURANI,0			STX	ANIPTRL,L		STX	ANIPTRH,H		XOR	A			;ANIM STARTED		STX	WAIT,A		;LD	(ANIM_ENDED),A		;LD	(ANIM_HIT),A		;CLEAR HIT FLAG		RETSET_ANI_HL2	STX	ANIPTRL,L		STX	ANIPTRH,H		XOR	A			;ANIM STARTED		STX	WAIT,A		RET***************************************** 	     FLIP ANIMATION****************************************_ANIFLIP	LDX	A,FLAGS2		SET	MIRRORBIT,A		STX	FLAGS2,A		INC	DE			;NEXT POS		STW	D,E,ANIPTRL		JP	NEXTANIM***************************************** 	     HATCH ANIMATION****************************************_ANISET		INC	DE		LD	A,(DE)		STX	FLAGS2,A		INC	DE			;NEXT POS		STW	D,E,ANIPTRL		JP	NEXTANIM***************************************** 	     HATCH ANIMATION****************************************_ANISOUND	INC	DE		LD	A,(DE)		CALL	SFX_PLAY		INC	DE			;NEXT POS		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************              SET OFFSET****************************************_ANIOFF		INC	DE			;NEXT POS		LD	A,(DE)		STX	XOFF,A		INC	DE		LD	A,(DE)		STX	YOFF,A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************         DISPLAY MANUAL SPRS****************************************_ANIMEMFRM	INC	DE			;NEXT POS		LD	A,(DE)			;L		STX	MANSPRL,A		INC	DE		LD	A,(DE)			;H		STX	MANSPRH,A		INC	DE		LD	A,(DE)			;BANK		STX	MANBANK,A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************         DISPLAY MANUAL SPRS****************************************_ANISETMEM	INC	DE			;NEXT POS		LD	A,(DE)			;L		LD	L,A		INC	DE		LD	A,(DE)			;H		LD	H,A		INC	DE		LD	A,(DE)		LD	(HL),A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************         DISPLAY MANUAL SPRS****************************************_ANILINKSPR	INC	DE			;NEXT POS		LD	A,(DE)			;WORD L		STX	LINKL,A		INC	DE		LD	A,(DE)			;WORD H		STX	LINKH,A		INC	DE		LD	A,(DE)			;+ X			STX	LINKX,A		INC	DE		LD	A,(DE)			;+ Y			STX	LINKY,A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************         DISPLAY MANUAL SPRS****************************************_ANIWORDFRM	INC	DE			;NEXT POS		LD	A,(DE)			;L		STX	MANSPRL,A		LD	C,A		INC	DE		LD	A,(DE)			;H		STX	MANSPRH,A		LD	B,A		INC	DE		INC	BC			;IS BC = #FFFF		LD	A,B		OR	C		JP	Z,@ZERO		STX	MANBANK,#FF		STW	D,E,ANIPTRL		JP	NEXTANIM@ZERO		STX	MANBANK,#00			STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************              SET VOLOCITYS****************************************_ANISETVEL	INC	DE			;NEXT POS		LD	A,(DE)		PUSH	DE		CALL	LOR_VEL		POP	DE		INC	DE		LD	A,(DE)		STX	YSPD,A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************             MOVE ANIMATION****************************************_ANIMOVE	INC	DE			;NEXT POS		LD	A,(DE)		LD	C,A		INC	DE		LD	A,(DE)		LD	B,A		LDX	A,FLAGS		BIT	MIRRORBIT,A		JP	Z,@OK		LD	A,C			;NEGATE DIRECTION		CPL		INC	A		LD	C,A@OK		LDX	A,XCOORD		ADD	A,C		STX	XCOORD,A		LDX	A,YCOORD		ADD	A,B		STX	YCOORD,A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************	   ANIM IF JUMP COMMAND****************************************_ANI_IF		INC	DE			;NEXT POS		LDX	B,SBASE			;IF SBASE = CONDITION		LD	A,(DE)			;GET CONDITION		CP	B		JP	Z,_ANIJUMP		;DO JUMP		INC	DE			;ELSE SKIP OVER CONDITION		INC	DE			;SKIP LOW		INC	DE			;SKIP HIGH		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************	 ANIM IF HIT JUMP COMMAND****************************************_ANI_IFHIT	INC	DE			;NEXT POS		LD	A,(DE)			;GET CONDITION		PUSH	DE		CALL	SCAN_COL		POP	DE		JP	C,_ANIJUMP		;DO JUMP		INC	DE			;ELSE SKIP OVER CONDITION		INC	DE			;SKIP LOW		INC	DE			;SKIP HIGH		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************	 ANIM DJNZ TYPE COMMAND****************************************_ANI_LOOP	LDX	A,LOOPCOUNT		DEC	A		STX	LOOPCOUNT,A		JP	NZ,_ANIJUMP				INC	DE		INC	DE			;SKIP LOW		INC	DE			;SKIP HIGH		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************		ANIM JUMP****************************************_ANIJUMP	INC	DE			;NEXT POS		LD	A,(DE)		LD	L,A		INC	DE		LD	A,(DE)		LD	D,A		LD	E,L		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************		ANIM CALL****************************************_ANI_CALL	INC	DE			;NEXT POS		LD	A,(DE)		LD	L,A		INC	DE		LD	A,(DE)		LD	H,A		INC	DE		STW 	D,E,ANIPTRL		LD	DE,NEXTANIM		PUSH	DE		LD	A,1		SETBANK		JP	(HL)	*****************************************		DO A WAIT****************************************_ANIWAIT	INC	DE			;NEXT POS		LD	A,(DE)		STX	WAIT,A		INC	DE		STW	D,E,ANIPTRL		JP	EXITANIM*****************************************		DO A WAIT****************************************_ANISETLOOP	INC	DE			;NEXT POS		LD	A,(DE)		STX	LOOPCOUNT,A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************        TEST FOR OPPENTENT HIT****************************************_ANIHIT		LD	A,1		LD	(ANIM_HIT),A		INC	DE			;NEXT POS		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************		WRITE TO FLAG****************************************_ANIFLAG	INC	DE			;NEXT POS		LD	A,(DE)		LD	(ANIFLAGS),A		INC	DE		STW	D,E,ANIPTRL		JP	NEXTANIM*****************************************            TEST FOR BUTTON*     IF SAME MOVE PRESSED CONTINUE*       ANIMATION ELSE DO ANIEND****************************************_SIGNAL		LD	A,1		LD	(ANIM_ENDED),A		INC	DE			;NEXT POS		STW	D,E,ANIPTRL		JP	NEXTANIM******************************************	    GET SEQUENCE TYPE*	    RETURNS TYPE IN A*****************************************GET_HIS_DATA	CALL	GET_HIS_ACTIONGET_SEQ_DATA	PUSH	HL		PUSH	DE		LD	L,A			;INDEX INTO ANIMTAB		LD	H,0		ADD	HL,HL			;2 WORDS		ADD	HL,HL		LD	DE,ANIMTAB+2		ADD	HL,DE		LD	A,ANIMBANK		SETBANK		LD	B,(HL)		INC	HL		LD	C,(HL)		LD	A,1		SETBANK		LD	A,B		POP	DE		POP	HL		RET******************************************	     GET HIS ACTION*****************************************GET_HIS_ACTION	LD	A,(SPRNUM)		AND	A		JP	Z,@IM0		LDBA	CURANI,0		RET@IM0		LDBA	CURANI,1		RET*****************************************	    GET PLAYERS WORD*	    ~~~~~~~~~~~~~~~~*       FROM 10 WORD TABLE AT HL*	   RETURN WORD IN HL****************************************GET_CHAR_WORD	LDX	A,SBASE		ADD	A,A		LD	C,A		LD	B,0		ADD	HL,BC		LD	A,(HLI)		LD	H,(HL)		LD	L,A		OR	H  		;ZERO CHECK		RET*****************************************	    GET PLAYERS BYTE*	    ~~~~~~~~~~~~~~~~*       FROM 10 BYTE TABLE AT HL*	    RETURN WORD IN A****************************************GET_CHAR_BYTE	LDX	C,SBASE		LD	B,0		ADD	HL,BC		LD	A,(HL)		AND	A		RET*****************************************	   GET DIFFICULY WORD*	   ~~~~~~~~~~~~~~~~~~*       FROM 10 WORD TABLE AT HL*	   RETURN WORD IN HL****************************************GET_DIFF_WORD	LD	A,(DIFF)GET_WORD_HL	ADD	A,A		LD	C,A		LD	B,0		ADD	HL,BC		LD	A,(HLI)		LD	H,(HL)		LD	L,A		OR	H  		;ZERO CHECK		RET*****************************************	   GET DIFFICULY BYTE*	   ~~~~~~~~~~~~~~~~~~*       FROM 10 WORD TABLE AT HL*	    RETURN WORD IN A****************************************GET_DIFF_BYTE	LD	A,(DIFF)GET_BYTE_A	LD	C,A		LD	B,0		ADD	HL,BC		LD	A,(HL)		AND	A		RET