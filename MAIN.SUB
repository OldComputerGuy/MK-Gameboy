*********************************************************************************		  	      MORTAL KOMBAT GAMEBOY VERSION*			      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*             WRITTEN BY A.R.HARTLEY 1992********************************************************************************SUBMIT		= 0			;IF 1 THEN MAKE ROMGRAP		= 1		SENDDJNZ		MACRO		DEC	B		JP	NZ,\@1		ENDMEQUINC		MACRO\1		=	NUMNUM		= NUM + 1		ENDMSAME		MACRO\1		=	NUM-1		ENDMEQUDEC		MACRO\1		=	NUMNUM		= NUM - 1		ENDMBCD		MACRO		DB	#\4		DB	#\3		DB	#\2		DB	#\1		ENDM*****************************************	  KEYPAD CONTROL BITS****************************************		IF	SUBMIT=1KEY_A		EQU	2KEY_B		EQU	1		ENDIF		IF	SUBMIT=0KEY_A		EQU	1KEY_B		EQU	2		ENDIFKEY_SELECT	EQU	4KEY_START	EQU	8KEY_RIGHT	EQU	16KEY_LEFT	EQU	32KEY_UP		EQU	64KEY_DOWN	EQU	128		IF	SUBMIT=1BIT_KEY_A	EQU	1BIT_KEY_B	EQU	0		ENDIF		IF	SUBMIT=0BIT_KEY_A	EQU	0BIT_KEY_B	EQU	1		ENDIFBIT_KEY_SELECT	EQU	2BIT_KEY_START	EQU	3BIT_KEY_RIGHT	EQU	4BIT_KEY_LEFT	EQU	5BIT_KEY_UP	EQU	6BIT_KEY_DOWN	EQU	7*****************************************       SPRITE CONTROL MACRO'S****************************************LDBA		MACRO				;LDBA	VAR,BUF		LD	A,(SPRBUF+\2*BUFLEN+\1)		ENDM		STBA		MACRO				;STBA	VAR,BUF		LD	(SPRBUF+\2*BUFLEN+\1),A		ENDM		LDX		MACRO				;LDX A,SEQADDL		IFS	[\1][A]		LDZ	A,(ANIMBASE+\2)		ELSE		LDZ	A,(ANIMBASE+\2)		LD	\1,A		ENDIF		ENDMSTX		MACRO			;STX SEQADDL,A		IFS	[\1][A]		LDZ	(ANIMBASE+\1),A		ELSE		LD	A,\2		LDZ	(ANIMBASE+\1),A		ENDIF		ENDMLDW		MACRO			;LDW  H,L,XCOORD		LDX	\2,\3		LDX	\1,\3+1		ENDMSTW		MACRO			;STW  H,L,XCOORD		STX	\3,\2		STX	\3+1,\1		ENDMSPR		MACRO		LD	HL,SPRBUF+(BUFLEN*\1)		ENDMMOVE		MACRO		STX	SEQADDL,<\1		STX	SEQADDH,>\1		ENDM*****************************************       MEMORY CONTROL MACRO'S****************************************MEMB		MACRO\1		EQU	MBASEMBASE		=	MBASE + 1		ENDMMEMW		MACRO\1		EQU	MBASEMBASE		=	MBASE + 2		ENDMMEMS		MACRO\1		EQU	MBASEMBASE		=	MBASE + \2		ENDMFMEMB		MACRO\1		EQU	FRAMFRAM		=	FRAM + 1		IF FRAM = #FFFF		ERROR OUT OF HIGH MEMORY		ENDIF		ENDMFMEMW		MACRO\1		EQU	FRAMFRAM		=	FRAM + 2		IF FRAM > #FFFE		ERROR OUT OF HIGH MEMORY		ENDIF		ENDMFMEMS		MACRO\1		EQU	FRAMFRAM		=	FRAM + \2		ENDMSETBANK		MACRO		LD	(LBANK),A		LD	(BANKSEL),A		ENDMSPRMAC		MACRO		IF GRAP=1		DW	\1		DB	\2		DB	\3		DB	\4+BBASE		ENDIF		ENDMSPRNULL		MACRO		IF GRAP=1		DW	0		DB	0		DB	0		DB	0		ENDIF		ENDM*****************************************		 EQUATES****************************************NUM		= 	0		EQUINC	SC_0		EQUINC	SC_100		EQUINC	SC_200		EQUINC	SC_500		EQUINC	SC_1000		EQUINC	SC_2000		EQUINC	SC_5000		EQUINC	SC_10000		EQUINC	SC_20000		EQUINC	SC_50000		EQUINC	SC_100000		EQUINC	SC_200000		EQUINC	SC_500000		EQUINC	SC_1000000STOP		=	0AT		=	1BOX		=	2DOWNLOAD	=	#0156		;DOWNLOAD RETURN ADDRESSBANKSEL		=	#3FFFINBYTE		=	#DFC0SIOFLAG		=	#DFC1*****************************************        PLAYERS BASE NUMBERS****************************************NUM		= 0		EQUINC	_CAGE				EQUINC	_KANO				EQUINC	_RAIDEN				EQUINC	_KANG				EQUINC	_SCORPION			EQUINC	_SUBZERO			EQUINC	_LIZ				EQUINC	_GORO				EQUINC	_EMP				EQUINC	_WEAPONS			EQUINC	_WKANO				EQUINC	_WRAIDEN			EQUINC	_WKANG				EQUINC	_WSCORPION		EQUINC	_WSUBZERO			EQUINC	_WLIZ				EQUINC	_WGORO				EQUINC	_WEMP				EQUINC	_FATAL	*****************************************          CONTROL REGISTER****************************************P1		=	#FF00		;KEY PORTSB		=	#FF01		;SERIAL DATASC		=	#FF02		;SERIAL CONTROLDIV		=	#FF04		;DIVIDERTIMA		=	#FF05		;TIMERTMA		=	#FF06		;TIMERTAC		=	#FF07		;TIMER CONTROLLIF		=	#FF0F		;INTERRUPT FLAGIE		=	#FFFF		;INTERRUPT ENABLE FLAGLCDC		=	#FF40		;LCD CONTROLLSTAT		=	#FF41		;LCDC STATUSSCY		=	#FF42		;SCROLL XSCX		=	#FF43		;SCROLL YLY		=	#FF44		;LCDC YLYC		=	#FF45		;LCDC Y COMPAREDMA		=	#FF46		;DMA CONTROLBGP		=	#FF47		;BAK PALETOBP0		=	#FF48		;OBJ 0 PALETOBP1		=	#FF49		;OBJ 1 PALETWY		=	#FF4A		;WINDOW XWX		=	#FF4B		;WINDOW Y*****************************************          RAM ALLOCATION****************************************MBASE		=	#C000			;START OF NORMAL RAMFRAM		=	#FF8A			;START OF FASTRAM*****************************************   TABLE LOCATION AND BANK EQUATES****************************************PANELCHR	EQU	64		;START CHR FOR PANELSTARTSPR	EQU	64+20		;START SPRITE IN CHR BANKBLANKCHR	EQU	0		;SPRITE MASKING BLANKANIMBANK	EQU	#02		;ANIMTABS BANKWORDBANK	EQU	#02		;WORDTABS BANKMUSICBANK	EQU	#02		;WORDTABS BANKBASEBANK	EQU	#34000		;BASEBANK FOR FRAMEDATABBASE		EQU	#03		;BASE FOR BANK SELECTWORDLIST	EQU	#24C00		;WORDTABS ORG ADDRESSANIMLIST	EQU	#25600		;ANIMTABS ORG ADDRESSMUSICADD	EQU	#26100		;MUSIC PRG ADDRESS*****************************************    ANIMLIST NOW FOLLOWS WORDLIST****************************************		INCLUDE ANIMTAB.SUB		;FOLLOWED BY ANIMTAB*****************************************	SPRITE BUFFER EQUATES****************************************NUM		= 0		EQUINC	XCOORD			;XCOORD		EQUINC	YCOORD			;YCOORD		EQUINC	XSPD			;X SPEED		EQUINC	YSPD			;Y SPEED		EQUINC	XOFF			;X OFFSET		EQUINC	YOFF			;Y OFFSET		EQUINC	CURANI			;CURRENT ANIM NUMBER		EQUINC	ANIPTRL			;CURRENT ANIM POINTER		EQUINC	ANIPTRH		EQUINC	MANSPRL			;MANUAL SPR PTR		EQUINC	MANSPRH		EQUINC	MANBANK			;MANUAL SPR BANK					EQUINC	LINKL			;MANUAL SPR PTR		EQUINC	LINKH			;MANUAL SPR PTR		EQUINC	LINKX			;MANUAL SPR PTR		EQUINC	LINKY			;MANUAL SPR PTR		EQUINC	SEQADDL			;SEQUENCE ADDRESS (LOW/HIGH)		EQUINC	SEQADDH				EQUINC	FLAGS			;FLAGS		EQUINC	FLAGS2			;FLAGS		EQUINC	OUTBYTE			;FLAGS		EQUINC	INBYTE			;FLAGS		EQUINC	ANIM			;CURRENT ANIM TO BE DISPLAYED		EQUINC	WAIT 			;WAIT COUNT			EQUINC	SBASE 			;SPRITE BASE		EQUINC	KEYPTR_L		;KEY POINTER		EQUINC	KEYPTR_H		EQUINC	KEYTIME			;DELAY TIME		EQUINC	KEYTEMP_L		EQUINC	KEYTEMP_H		EQUINC	D0			;TEMP DATA REGS		EQUINC	D1	 		EQUINC	D2	 		EQUINC	D3	 		SAME	LOOPCOUNT		EQUINC	SUPERTIME		;LAST SUPER MOVE				EQUINC	PROJTIME		;LAST SLAM		EQUINC	MAXPROJ			;MAX MISSILES		EQUINC	DAMAGE			;DAMAGE DONE TO ME		EQUINC	BUFLEN			;TOTAL BUFFER LENGTHMAXSPR		EQU	256/BUFLEN		;MAXIMUM AMOUNT OF SPRITESMAXUSED		EQU	4*****************************************	BIT SETTING****************************************MIRROR		EQU	1			;MIRROR BITDRONE		EQU	2			;COMPUTER CONTROLLED PLAYERICED		EQU	4			;ICE FRAMESHATCHED		EQU	8			;HATCH FRAMETWOCOL		EQU	16GRAVOFF		EQU	32EMPOROR		EQU	64DISABLE		EQU	128			;SPRITE DISABLEDMIRRORBIT	EQU	0DRONEBIT	EQU	1ICEBIT		EQU	2HATCHBIT	EQU	3TWOCOLBIT	EQU	4GRAVOFFBIT	EQU	5EMPORORBIT	EQU	6DISABLEBIT	EQU	7CLEAROFF	EQU	128*********************************************************************************			      RAM ALLOCATION********************************************************************************		MEMS	OBJRAM,256		;OAM RAM COPY AREA		MEMS	CHRDATA,256		;DECOMP DATA BUFFER		MEMS	COLTAB,256		;COLLISION CHR TABLE		MEMS	MIRPOS,256 		;RAM TABLES !!!		MEMS	MULLPOS,256		MEMS	MULHPOS,256		;3072 BYTES HERE CAN BE USED WHEN THEN MAIN GAME IS		;NOT RUNNING AS A DECOMPRESSION AREA		MEMS	MAPRAM,#0500		;BACKGROUND MAP BUFFER		MEMS	CHRRAM,#0400		;COPY OF BACKGROUND CHRS		MEMS	SPRBUF,#0100		;SPRITE BUFFER 1 & 2		MEMS	UNDERDATA,#200		;REPLACEMENT BUFFER		MEMS	TEXTMEM,1024		;IN GAME TEXT		MEMW	UNDERPTR		;SET STRIPBUF		MEMW	OLDSTK			;SET STRIPBUF		MEMB	HSPOS		MEMB	OLD_PLAYER1		MEMB	KEYS			;THIS GAMEBOYS KEYS		MEMB	TRIGGER			;THIS GAMEBOYS TRIGGER		MEMB	QKEYS			;THIS GAMEBOYS KEYS		MEMB	QRELKEYS		;THIS GAMEBOYS KEYS		MEMB	NEWKEYS		MEMB	NEWTRIG		MEMB	NSCY		MEMW	XPOS			;SPRITE XY POS 		MEMW	ZEROFLAG			MEMW	STACK1	    		;TEMP STACK STORE		MEMW	STACKLEV    		;TEMP STACK STORE		MEMW	SCRADD		MEMW	PLAN_PTR		MEMB	FACEPOS1		MEMB	FACEPOS2		MEMB	BIONUM		MEMB	WHICHSEL		MEMB	SELPOS		MEMW	BP_POS		MEMB	FACE_Y		MEMB	FLAWLESS		MEMB	FATALITY		MEMB	FLAWROUND		MEMB	CHEAT		MEMB	WINS0		MEMB	WINS1		MEMB	CLOCK_OFF		;SWITCH OF CLOCK FLAG		MEMB	FINISH_STATUS		MEMB	WINS_IN_ROW		MEMB	ROUND_NUM		MEMB	FINISH_HIM		MEMB	DONT_FIGHT		MEMB	STUMBLE_FLAG		MEMB	VICTORY_FLAG		MEMB	HITFLAG		MEMB	ONDECK		MEMB	CREDITS		MEMB	GOROFLAG		MEMB	FATAL_START		MEMS	PLAY_1_SCORE,4		;PLAYER 1 SCORE		MEMS	PLAY_2_SCORE,4		;PLAYER 2 SCORE		MEMB	LOCKSCROLL		;LOCK SCROLL FLAG		MEMB	I_STUMBLE		MEMW	BP_MOVE		MEMB	MAP_POSITION		MEMB	CUR_MAP_POS		MEMB	OBJFLAGS		MEMB	NEXTSPR			;SPRITE LIST POS		MEMB	HARDSPR			;SPRITE LIST POS		MEMB	SPARECHRS		;AMOUNT OF SPARE CHRS		MEMB	LASTSPARE		;LAST FRAMES SPARES		MEMB	ALLBITS			;ALL MASK DATA ADDED TOGETER		MEMB	SPRWIDE			;WIDTH IN SPRITES		MEMW	XYPOS			;POS OF SPRITE		MEMB	ORIGINY		MEMB	COLSTART		;COLLISION BUFFER START POS		MEMB	OFFCLR			;CLEAR OFFSET FLAG		MEMW	OBJPTR			;OAM WRITE POSITION		MEMB	MIR			;MIRROR FLAG		MEMB	DISPFLAGS		;DISPLAY FLAGS		MEMB	OFFX			;OFFSET X FOR SPRITE		MEMB	OFFY			;OFFSET X FOR SPRITE		MEMB	CHRBANK			;BACKGND CHRS BANK		MEMB	CHRADDL			;ADDRESS OF BACKGND CHRS		MEMB	CHRADDH			;ADDRESS OF BACKGND CHRS		MEMB	TIME			;TIMER		MEMB	TEMP1			;TEMPORARY VARIABLE		MEMB	HATCH			;HATCHING STORE		MEMB	SHAKEPOS		MEMB	ANIFLAGS		;ANIM PARSER FLAGS		MEMB	OFFSETX			;PARSER OFFSETS		MEMB	OFFSETY		MEMS	PANELBUF,20		;PANEL BUFFER		MEMB	ANIM_ENDED		;END OF ANIMATION FLAG		MEMB	ANIM_HIT		;ANIM HIT FLAG		MEMB	FLIP			;SPRITE FLIP FLAG		MEMB	SPRNUM			;PARSER SPRITE NUMBER		MEMB	SPRNUMBIT		;SPRITE NUMBER AS A BIT		MEMB	SKIPLINES		;SPRITE NUMBER AS A BIT		MEMB	OLDSKIPLINES		;COPY OF ABOVE		MEMB	SHAKE_Y		MEMB	CENTERX			;WINDOW CENTER		MEMB	PRIORITY		;PRIORTY SWITCH		MEMB	COLLISIONS		;COLLISION NUM		MEMB	HITHOME			;COLLISION SUCCESS FLAG		MEMB	PREVCOL		MEMB	GAMETIME		;TIME LEFT IN GAME		MEMB	PLAYERS		MEMB	SPRX0			;SPR 0 & 1 X POS		MEMB	SPRX1		MEMB	SPRX2		MEMB	SPRX3		MEMB	BASE0			;SPR 0 & 1 X POS		MEMB	BASE1			;SPR 0 & 1 X POS		MEMW	SCORE0			;PLAYER 1 SCORE		MEMW	SCORE1			;PLAYER 2 SCORE		MEMB	SPRHIT0			;HIT ACTION FLAG		MEMB	WHOHIT0			;HIT ACTION FLAG			MEMB	SPRHIT1		MEMB	WHOHIT1		MEMB	WHO_HIT_ME		;GLOBAL WHO HIT LAST		MEMB	WHAT_HIT_WITH		;GLOBAL WHO HIT LAST		MEMB	HITPOWER		MEMB	HITSCORE		MEMB	ROPEFLAG		MEMB	SORTFLAG		MEMB	SPRENERGY0		;SPR ENERGY LEVELS				MEMB	SPRENERGY1		MEMB	ENERGY0			;BAR LEVELS				MEMB	ENERGY1				MEMB	ICEBACKTIME		MEMB	SEED			;RANDOM SEED		MEMB	LASTSEED		;RANDOM SEED		MEMB	DIFF			;CURRENT DIFF		MEMB	DIFFLEVEL		;MAIN DIFF		MEMB	DEMOFLAG		;DEMO FLAG		MEMB	EMPTIME			;EMPOROR TIMER		MEMB	NOBEWARE		;DRONE DEFENCE COUNT		MEMB	TESTVAR		MEMW	LASTRETADD		;MAIN DIFF		MEMS	ENEMY_TAB,64		;PLAN TABLE		MEMS	PLANLIST,64		MEMB	VBLFLAG,0		MEMB	CHANSEL,0		MEMB	DMA_GO		MEMW	TEXTFLAG		MEMW	TEXTADD		MEMW	UND_TXT_PTR		;MAIN SCR TEXT BUFFER STUFF		MEMS	UND_TXT_BUF,256*****************************************	 GAMEBOY LINK VARIABLES****************************************		MEMB	MASTER			;MASTER OR SLAVE FLAG		MEMB	CONNECT			;MASTER OR SLAVE LINK FLAG		MEMB	INKEYS			;KEYS FROM THE OTHER GAMEBOY		MEMB	INTRIG			;TRIGS FROM THE OTHER GAMEBOY		MEMB	LASTSENT		MEMB	MYBIT		MEMB	LINKBYTE		MEMS	TRANBLOCK,8		;TRANSFER BLOCK*****************************************          HIGH SCORE TABLE****************************************		MEMS	HS1,8		MEMS	HS2,8		MEMS	HS3,8		MEMS	HS4,8		MEMS	HS5,8		MEMS	HS6,8		MEMS	HS7,8		MEMS	HSLAST,8*****************************************      FAST MEMORY RAM ALLOCATIONS****************************************		FMEMB	REG1			;FAST TEMP MEM		FMEMB	REG2		FMEMB	REG3		FMEMB	REG4		FMEMB	REGX		FMEMB	REGYANIMBASE	EQU	FRAM		FMEMS	SPRDAT,BUFLEN		;SPRITE FAST BUFFER		INCLUDE	MUSICVAR.SUB*********************************************************************************			  END OF RAM ALLOCATION********************************************************************************STACK		=	#DFFE			;TOP OF WORKRAMLBANK		=	#DFFF			;LAST BANKMULL		=	>MULLPOSMULH		=	>MULHPOSMIRTAB		=	>MIRPOS*****************************************            RST 0 VECTOR****************************************		ORG	#00		RET*****************************************         V BLANK INTERRUPT****************************************		ORG	#40		JP	NEWVBL*****************************************       LCDC STATUS INTERRUPT****************************************		ORG	#48		RET*****************************************          TIMER INTERRUPT****************************************		ORG	#50		RETI*****************************************  PUT IN ROM START JUMP IF MAKING ROM****************************************		IF	SUBMIT=1		ORG	#150		JP	INIT		ENDIF*****************************************	  START OF PROGRAM****************************************		ORG	#400		IF	SUBMIT=0		EXEC	$		ENDIFINIT		DI		LD	SP,STACK		CALL	INITHARD		CALL	INIT_INTRO_SCR		CALL	PAL_OFF		LD	A,#01		SETBANK		CALL	DMA_COPY		CALL	SET_TABLES		XOR	A	 		;NO DMA TRANS		LD	(DMA_GO),A		EI		CALL	INITLINK		DI		XOR	A		LD	(VBLFLAG),A		LD	A,MUSICBANK		SETBANK		CALL	INIT_MUSIC		XOR	A		LD	(CHEAT),A		CALL	GETKEYS		LD	A,(KEYS)		CP	%00000011		JP	NZ,@NOPE		LD	A,1		LD	(CHEAT),A@NOPE		EI		LD	A,1		SETBANK		CALL	COPYHIGHS		CALL	ATTRACT		JP	DOWNLOAD*****************************************	   PLAY A TUNE OF SFX****************************************PLAY_MUSIC	LD	C,A		DI		LD	A,MUSICBANK		LD	(BANKSEL),A		LD	A,C		CALL	PLAY_TUNE				LD	A,(LBANK)		LD	(BANKSEL),A		EI		RET*****************************************	   PLAY A TUNE OF SFX****************************************SFX_PLAY	PUSH	DE		PUSH	HL		PUSH	BC		LD	C,A		;LD	A,(DEMOFLAG)		;AND	A		;JP	NZ,@NOPE		DI		LD	A,MUSICBANK		LD	(BANKSEL),A		LD	A,C		CALL	PLAY_FX				LD	A,(LBANK)		LD	(BANKSEL),A		EI@NOPE		POP	BC		POP	HL		POP	DE		RET*****************************************	   NEW VBLANK ROUTINE****************************************NEWVBL		DI		PUSH	AF			;SAVE ALL		PUSH	HL		PUSH	DE		PUSH	BC		CALL	TEST_DMA_TRANS		CALL	DO_MUSIC		LD	A,1		LD	(VBLFLAG),A		POP	BC			;RESTORE MOST		POP	DE		POP	HL		EI@W1		LDZ	A,(STAT)		;DON'T RETURN UNTIL HBLANK		AND	2			;IS IN CORRECT PLACE !!		JP	NZ,@W1		POP	AF			;RESTORE A		RETI*****************************************        DO THE MUSIC INT STUFF****************************************DO_MUSIC	LD	A,MUSICBANK		LD	(BANKSEL),A		CALL	MUSIC_INT		;DO MUSIC INTERRUPT		LD	A,(LBANK)		LD	(BANKSEL),A		RET*****************************************         COMPARE HL WITH DE*	  ~~~~~~~~~~~~~~~~~~*         IF HL>DE CARRY SET*         IF HL<DE CARRY RESET****************************************CMP_HL_DE	PUSH	HL		PUSH	DE		LD	A,D		CPL		LD	D,A		LD	A,E		CPL		LD	E,A		INC	DE		ADD	HL,DE		POP	DE		POP	HL	 	RET*****************************************           TEST FOR DOWNLOAD****************************************DODOWN		IF	SUBMIT = 0		LD	A,(KEYS)		BIT	3,A		RET	Z		BIT	2,A		RET	Z		XOR	A			;STOP ALL SOUND		LD	(NR52),A			JP	DOWNLOAD		ENDIF		RET*********************************************************************************			 INCLUDE OTHER FILES********************************************************************************		INCLUDE GAME.SUB		INCLUDE LINK.SUB		INCLUDE	DECOMP.SUB		INCLUDE SPRITE.SUB		INCLUDE SEQUENCE.SUB		INCLUDE PLAYERS.SUB		INCLUDE REACT.SUBGAMECRED_MAP	INCBIN	GRAP\LBMS\GAMECRED.CMFENDPROG		EQU	$		IF	$>#3FFF		ERROR	FUCK UP		ENDIF*********************************************************************************           		    PAGED MEMORY********************************************************************************		ORG	#14000			;BANK 1		INCLUDE ATTRACT.SUB		INCLUDE	DRONE.SUB*****************************************           SCREENS,CHRS ETC.*         ALL PROPACK COMPRESSED****************************************TITLE_SCR	INCBIN	GRAP\LBMS\TITLE.CCFTITLE_MAP	INCBIN	GRAP\LBMS\TITLE.CMFPROBE_SCR	INCBIN	GRAP\LBMS\PROBE.CCFPROBE_MAP	INCBIN	GRAP\LBMS\PROBE.CMFACCLAIM_SCR	INCBIN	GRAP\LBMS\ACCLAIM.CCFACCLAIM_MAP	INCBIN	GRAP\LBMS\ACCLAIM.CMFGORO_SCR	INCBIN	GRAP\LBMS\GORO.CCFGORO_MAP	INCBIN	GRAP\LBMS\GORO.CMFPLAN_CHR	INCBIN	GRAP\LBMS\BATPLAN.CCFPLAN_MAP	INCBIN	GRAP\LBMS\BATPLAN.CMFFACES_CHR	INCBIN	GRAP\LBMS\FACES.CCFFACES_MAP	INCBIN	GRAP\LBMS\FACES.CMFCHRS_AND_BOXES	INCBIN	GRAP\LBMS\NEWCHR.CCFCHRSET		INCBIN	GRAP\CHRS\KOMCHR.BINSLIDECHR	INCBIN	GRAP\LBMS\SLIDECHR.GBCSC_SPEAR	DB	-2,1			;OFFSET		INCBIN	GRAP\EXTRA\_#SPEAR.GSPENDBANK1	EQU	$		IF	$>#7FFF		ERROR	FUCK UP bank 1		ENDIF*****************************************	      MAPS IN BANK 2****************************************		ORG	#24000CHR2		INCBIN	GRAP\LBMS\SLAPHEAD.CCFMAP2		INCBIN	GRAP\LBMS\SLAPHEAD.CMFCHR3		INCBIN	GRAP\LBMS\DUNGEON.CCFMAP3		INCBIN	GRAP\LBMS\DUNGEON.CMFCHR1		INCBIN	GRAP\LBMS\BRIDGE.CCFMAP1 		INCBIN	GRAP\LBMS\BRIDGE.CMF*****************************************	    ANIMATION TABLES****************************************		INCLUDE GRAP\INCFRAME.SUBENDWORD		EQU	$*****************************************	     INCLUDE MUSIC****************************************		ORG	MUSICADD		INCLUDE MUSIC.SUB		IF	$>#7FFF		ERROR	FUCK UP bank 2		ENDIF*****************************************         END OF PROGRAM****************************************END		EQU	$		END