********************************************************************************* 			    SET UP A PLAYER********************************************************************************CLOSE_DIST	EQU	6	;5ATTACK_DIST	EQU	6	;5*****************************************	   SET UP ONE PLAYER****************************************GROUNDLEVEL	EQU	64+4		;64+5SETPLAY1		LD	A,#FF		;PRESET SPR 1'S X		LD	(SPRX1),A		XOR	A		LD	(SPRNUM),A		STX	XCOORD,22		;24		STX	YCOORD,GROUNDLEVEL		STX	CURANI,0		STX	ANIPTRL,0		STX	ANIPTRH,0		STX	MANSPRH,#FF		STX	LINKH,#FF		STX	ANIM,0		STX	FLAGS,0		STX	FLAGS2,0		STX	XSPD,0 			;XSPEED		STX	YSPD,0			;GRAVITY SPEED		STX	XOFF,0		STX	YOFF,0		STX	KEYPTR_H,0		;CLEAR OUT SEQUENCE SEARCH		STX	PROJTIME,#FF		STX	SUPERTIME,#FF		STX	DAMAGE,0		STX	MAXPROJ,#FF		CALL	DEMO_SET		LD	A,(BASE0)		STX	SBASE,A		CP	_SUBZERO		JP	NZ,@1		LDX	A,FLAGS		SET	TWOCOLBIT,A		STX	FLAGS,A@1		MOVE	DO_STANCE1		LD	A,SEQ_STANCE		CALL	SET_ANI		CALL	SAME_PLAY		CALL	SUBZ_TEST		CALL	DO_ANIM		SPR	0      		;LOG INITIAL TASK		JP	PUTSPR*****************************************	   SET UP ONE PLAYER****************************************SETPLAY2	LD	A,1		LD	(SPRNUM),A		STX	XCOORD,33		;31		STX	YCOORD,GROUNDLEVEL		STX	CURANI,0		STX	ANIPTRL,0		STX	ANIPTRH,0		STX	MANSPRH,#FF		STX	LINKH,#FF		STX	ANIM,0		STX	FLAGS,MIRROR+DRONE		STX	FLAGS2,0		LD	A,(CONNECT)		;IF NOT CONNECT KEEP DRONE 		AND	A		JP	Z,@NOCONNECT		STX	FLAGS,MIRROR@NOCONNECT	STX	XSPD,0 			;XSPEED		STX	YSPD,0			;GRAVITY SPEED		STX	XOFF,0		STX	YOFF,0		STX	KEYPTR_H,0		;CLEAR OUT SEQUENCE SEARCH		STX	PROJTIME,#FF		STX	SUPERTIME,#FF		STX	DAMAGE,0		STX	MAXPROJ,#FF		CALL	DEMO_SET		LD	A,(BASE1)		STX	SBASE,A		LD	A,(GOROFLAG)		AND	A		JP	NZ,@NIGNOGS		LD	A,(BASE1)		CP	_SUBZERO		JP	NZ,@1@NIGNOGS	LDX	A,FLAGS		SET	TWOCOLBIT,A		STX	FLAGS,A@1		MOVE	DO_STANCE1		LD	A,SEQ_STANCE		CALL	SET_ANI		CALL	SAME_PLAY		CALL	SUBZ_TEST		CALL	DO_ANIM		SPR	1      		;LOG INITIAL TASK		JP	PUTSPR*****************************************	SET UP SECOND PAIR PLAYER****************************************PAIRPLAY	LD	A,1		LD	(SPRNUM),A		SPR	1		CALL	GETSPR		LDX	A,FLAGS		RES	TWOCOLBIT,A		STX	FLAGS,A		LD	A,(BASE1)		STX	SBASE,A		CP	_SUBZERO		JP	NZ,@1		LDX	A,FLAGS		SET	TWOCOLBIT,A		STX	FLAGS,A@1		MOVE	DROPDOWN		SPR	1      		;LOG INITIAL TASK		JP	PUTSPR*****************************************    	DROP DOWN PAIR ROUTINE****************************************DROPDOWN	LD	A,SEQ_PAIRCROSS		CALL	SET_ANI			CALL	ME_ON_TOP		MOVE	DROP1DROP1		CALL	DO_ANIM		XOR	A		LD	(SPRHIT0),A		LD	(SPRHIT1),A		LD	A,(ANIM_ENDED)		AND	A		RET	Z				JP	DO_STANCE*****************************************     SETUP CHANGES FOR DEMO MODE****************************************DEMO_SET	LD	A,(DEMOFLAG)		AND	A		RET	Z		LDX	A,FLAGS		OR	DRONE		STX	FLAGS,A		RET*****************************************         MAIN ENTRY FOR ANY PLAYER****************************************DO_STANCE1	CALL	SET_ENERGY		MOVE	DO_STANCE		RETDO_STANCE	MOVE	PLAYER1		LD	A,SEQ_STANCE		CALL	SET_ANIPLAYER1		CALL	SAME_PLAY		CALL	SUBZ_TEST		CALL	PUSH_AWAY		LD	A,(DONT_FIGHT)		AND	A		JP	NZ,DO_NOTHING		LD	A,1		SETBANK		LDX	A,FLAGS		BIT	DRONEBIT,A		JP	NZ,DRONE_START		CALL	FACE_HIM		CALL	DO_PROCS		;CALL ANIMATION DRIVER	 	LD	A,(NEWKEYS)		BIT    	BIT_KEY_DOWN,A		JP	NZ,JOY_DOWN		BIT    	BIT_KEY_UP,A		JP	NZ,JOY_UP		BIT    	BIT_KEY_LEFT,A		JP	NZ,JOY_LEFT		BIT    	BIT_KEY_RIGHT,A		JP	NZ,JOY_RIGHT	 	LD	A,(NEWKEYS)		AND	KEY_A+KEY_B		CP	KEY_A+KEY_B		JP	Z,DO_HIGHBLOK		LD	A,(NEWTRIG)		BIT    	BIT_KEY_A,A		JP	NZ,DO_PUNCH		BIT    	BIT_KEY_B,A		JP	NZ,DO_KICK		IF	SUBMIT=0		LD	A,(NEWKEYS)		BIT	3,A		JP	NZ,DO_FATAL_MOVE		ENDIF		RETDO_NOTHING	CALL	FACE_HIM		CALL	DO_PROCS		;CALL ANIMATION DRIVER	  	RET*****************************************	   FLIP THE MIRROR****************************************FLIPMIRROR	LDX	A,FLAGS		XOR	MIRROR		STX	FLAGS,A		RETCLRFLAGFX	LDX	A,FLAGS			;CLR FX BITS EXCEPT MIRROR		AND	#E1		STX	FLAGS,A		RET*****************************************    TEST IF IM PLAYING MY SELF****************************************SAME_PLAY	LD	A,(CONNECT)		;AM I LINKED		AND	A		JP	Z,@NOPE		LD	A,(MASTER)		;AM I SLAVE		AND	A		JP	NZ,@NOPE		LD	A,(SPRNUM)		;AM I PLAYER 2		AND	A		RET	NZ			;RET IF NOT		JP	@YEP@NOPE		LD	A,(SPRNUM)		AND	A		RET	Z@YEP		LD	A,(BASE0)		LD	C,A		LD	A,(BASE1)		CP	C		JP	NZ,@NOT				LDX	A,FLAGS		SET	TWOCOLBIT,A		STX	FLAGS,A		RET@NOT		CP	_SUBZERO		RET	Z		LDX	A,FLAGS		RES	TWOCOLBIT,A		STX	FLAGS,A		RET*****************************************	      SUBZERO TEST****************************************SUBZ_TEST	LD	C,0		LD	A,(CONNECT)		AND	A		JP	Z,@NOCON		LD	A,(MASTER)		LD	C,A@NOCON		LD	A,(SPRNUM)		CP	C		RET	Z		LD	A,(BASE1)		;IF BOTH SUBZERO		CP	_SUBZERO		RET	NZ		LD	A,(BASE0)		CP	_SUBZERO		RET	NZ		LDX	A,FLAGS		SET	HATCHBIT,A		STX	FLAGS,A		RET		*********************************************************************************			FIRE WEAPON SEQUENCE*		       to be called from main********************************************************************************FIRE_IT		LDX	A,SBASE		CP	_SCORPION		JP	NZ,@NOSCORP		CALL	FIND_MHD		CP	10		RET	C@NOSCORP	LDBA	OUTBYTE,0		AND	A		RET	NZ		LDBA	OUTBYTE,1		AND	A		RET	NZ		LD	A,SEQ_WEAPON_FIRE		CALL	SET_ANI@SKIP		CALL	ME_ON_TOP		STX	OUTBYTE,#FF		;FIRE WEAPON		MOVE	FIREM1FIREM1		CALL	DO_PROCS		LD	A,(ANIM_ENDED)		AND	A		RET	Z		LDX	A,SBASE		CP	_SCORPION		JP	NZ,DO_STANCE		MOVE	SCORPWAIT		LD	A,SEQ_STANCE		CALL	SET_ANISCORPWAIT	CALL	DO_PROCS		LD	A,(ROPEFLAG)		AND	A		RET	NZ		JP	DO_STANCE*****************************************	      INVERT SCREEN****************************************INVERT		LD	A,(BGP)		CPL		LD	(BGP),A		RET	*********************************************************************************			     SPECIAL MOVES*************************************************************************************************************************	     SUBZERO SLIDE****************************************SZ_SLIDE	LD	A,SEQ_SZSLIDE		;DO DUCK ANIM		JP	PLAY_ANI*****************************************	SCORPION EDGE JUMP****************************************SCORP_TELE	LDBA	OUTBYTE,0		AND	A		RET	NZ		LDBA	OUTBYTE,1		AND	A		RET	NZ		CALL	FIND_MHD		CP	14		RET	NC						LD	A,SEQ_SCORP_TELE		JP	PLAY_ANITEST_SC_TELE	LDX	A,XCOORD		CP	58		JP	NC,@NOPE		CP	6		JP	C,@NOPE		RET@NOPE		LD	HL,ANI_ANIEND		JP	SET_ANI_HL2SETGRNDLEVEL	LD	A,GROUNDLEVEL		STX	YCOORD,A		STX	XSPD,0 			;XSPEED		STX	YSPD,0			;GRAVITY SPEED		RET*****************************************	SCORPION EDGE JUMP****************************************HEADBUTT	LD	A,SEQ_HEADBUTT		JP	PLAY_ANI*****************************************	SCORPION EDGE JUMP****************************************KANOSPIN	LD	A,SEQ_KANOSPIN		JP	PLAY_ANI*****************************************   TEST IF KANO HAS HIT A BLOCKER*	IF HE HAS SPIN AWAY****************************************KANOBLOKSPIN	CALL	GET_HIS_DATA		BIT	_BLOCKBIT,A		RET	ZSPINBACK	STX	YSPD,-3		LD	A,9		CALL	LOR_VEL		LD	A,SEQ_SPINJMP		JP	SET_ANIKANOBALLHIT	CALL	OTHER_GUY		CP	_RAIDEN		JP	Z,@FUCK		CALL	GET_HIS_ACTION		CP	SEQ_DUCK		RET	Z@FUCK		LD	A,%00000011		CALL	SCAN_COL		RET	NC		LD	HL,SPINHIT		CALL	SET_ANI_HL2		LD	A,1		LD	(ANIM_HIT),A		RET*****************************************     IF HE HAS NO ERG STAY DEAD****************************************STAY_DEAD	LD	A,(I_STUMBLE)		AND	A		RET	NZ		CALL	GET_ENERGY		LD	A,(HL)		AND	A		RET	NZ		MOVE	FALL_DEAD2		LD	HL,FLOAT_DEAD		JP	SET_ANI_HL2DONT_STAY_DEAD	LD	A,(I_STUMBLE)		AND	A		RET	Z		LD	HL,KNOCK_STAND		JP	SET_ANI_HL2*****************************************	    CHANGE BACK TO EMP****************************************BACK_TO_EMP	LDX	A,SBASE		CP	_EMP		RET	Z		LDX	A,FLAGS		AND	EMPOROR		RET	Z		STX	SBASE,_EMP		LDX	A,FLAGS2	;MORPH TO EMP		OR	HATCHED		STX	FLAGS2,A		STX	XOFF,0		STX	YOFF,0		RET*****************************************	      LIZ BIG FLIP****************************************LIZ_SCISSOR	LD	A,SEQ_SCISSOR		JP	PLAY_ANI*****************************************	  LIZ FLYING SUPERPUNCH****************************************SUPERLIZ	LD	A,SEQ_SUPERLIZ		JP	PLAY_ANI*****************************************	      RAIDEN DIVE****************************************RAIDENDIVE	CALL	FIND_MHD		CP	9		RET	C		CALL	GET_HIS_ACTION		CP	SEQ_DIVE		RET	Z		LD	A,SEQ_DIVE		JP	PLAY_ANI****************************************HAS_RAID_HIT	CALL	FIND_MHD		CP	4		RET	C		LD	A,%00000011		CALL	SCAN_COL		JP	C,@HIT		RET@HIT		LD	HL,DIVEHIT		JP	SET_ANI_HL2****************************************LINK_RAID	CALL	GET_HIS_ACTION		;IF NOT DOING DIVE		CP	SEQ_DIVE		;DONT MOVE		RET	NZ		CALL	GETXPOS			;GET OTHERS XPOS		STX	XCOORD,A		;MAKE SAME AS MINE		RET****************************************DID_DIVE_HIT	CALL	GET_HIS_DATA		;IS HE BLOCKING ?		BIT	_BLOCKBIT,A		;IF HE'S NOT BLOCKING		RET	Z			;RETURN		JP	SPINBACK		;ELSE SPINBACK****************************************IFATWALL1	LDX	A,XCOORD		CP	5		JP	C,@ATWALL		CP	60		JP	NC,@ATWALL		RET@ATWALL		LD	HL,ATWALL1		JP	SET_ANI_HL2		CALL	GET_HIS_ACTION		CP	SEQ_DIVE		RET	Z		LD	HL,ATWALL2		JP	SET_ANI_HL2****************************************IFATWALL2	CALL	GET_HIS_ACTION		CP	SEQ_DIVE		RET	Z		LD	HL,ATWALL2		JP	SET_ANI_HL2*****************************************	       RAIDEN TELE****************************************RAIDENTELE	LD	A,SEQ_TELEPORT		JP	PLAY_ANI*****************************************	     RAIDEN FUCK YOU****************************************DO_FATAL_MOVE	LDX	A,SBASE		CP	_SCORPION		JP	Z,@SCORP		CP	_LIZ		JP	Z,@LIZ		LD	A,1		LD	(FATAL_START),A		LD	A,SEQ_FATAL_MOVE		JP	PLAY_ANI@SCORP		CALL	FIND_MHD		CP	9		JP	Z,@OK		CP	10		JP	Z,@OK		CP	11		JP	NZ,HELP_DRONE@OK		LD	A,SEQ_FATAL_MOVE		JP	PLAY_ANI@LIZ		CALL	FIND_MHD		CP	7		JP	Z,@LOK		CP	6		JP	Z,@LOK		CP	5		JP	NZ,HELP_DRONE@LOK		LD	A,SEQ_FATAL_MOVE		JP	PLAY_ANIHELP_DRONE	LDX	A,FLAGS	  		;HELP DRONES		BIT	DRONEBIT,A		JP	Z,DO_STANCE		LD	A,1		LD	(FINISH_STATUS),A		JP	DO_STANCE*****************************************      DRAIN ALL OTHER GUYS NRG****************************************DRAIN_NRG	LD	A,(SPRNUM)		AND	A		JP	Z,@DRAIN1		XOR	A		LD	(SPRENERGY1),A		RET@DRAIN1		XOR	A		LD	(SPRENERGY0),A		RET*****************************************	      THROW OPPONENT****************************************	       DO_THROW	CALL	RANDOM			;EAT THIS STACY		AND	3		JP	NZ,@NOTHROW		LDX	A,XCOORD   		;AND THIS		CP	8		JP	C,@NOTHROW		CP	64-8		JP	NC,@NOTHROW		CALL	GET_HIS_ACTION		CP	SEQ_DUCK		JP	NZ,@YESTHROW		CP	SEQ_STANCE		JP	NZ,@YESTHROW  		CP	SEQ_DUCKBLOK		JP	NZ,@YESTHROW		JP	@NOTHROW@YESTHROW	CALL	OTHER_GUY		CP	_GORO		JP	Z,@nothrow		CP	_EMP		JP	Z,@nothrow		LD	A,SEQ_THROW		JP	PLAY_ANI@nothrow	move	do_stance		;arh 10/6		ret*****************************************	   LOU KANG SUPER KICK****************************************KANGKICK	LD	A,SEQ_KANGKICK		JP	PLAY_ANI*********************************************************************************			  JOY STICK PUSHED DOWN********************************************************************************JOY_DOWN	CALL	STOP_GORO		LD	A,SEQ_DUCK		;DO DUCK ANIM		CALL	SET_ANI		MOVE	JYD1JYD1		CALL	DO_PROCS		LD	A,(NEWKEYS)		BIT	BIT_KEY_DOWN,A		;UP		JP	Z,DO_STANCE		AND	KEY_A+KEY_B		CP	KEY_A+KEY_B		JP	Z,DO_DUCKBLOK		LD	A,(NEWTRIG)		BIT	BIT_KEY_A,A		JP	NZ,DO_UPPERC		BIT	BIT_KEY_B,A		JP	NZ,DO_DUCKKICK		RET*****************************************	     DUCK AND BLOCK****************************************DO_DUCKBLOK		MOVE	JYDB1		LD	A,SEQ_DUCKBLOK		CALL	SET_ANI		JYDB1		CALL	DO_PROCS		LD	A,(NEWKEYS)		BIT	BIT_KEY_DOWN,A		JP	Z,DO_STANCE		AND	KEY_A+KEY_B		CP	KEY_A+KEY_B		JP	NZ,DO_STANCE		RET*****************************************	       HIGH BLOCK****************************************DO_HIGHBLOK	MOVE	HIGHB1		LD	A,SEQ_HIBLOCK		CALL	SET_ANI		HIGHB1		CALL	DO_PROCS		LD	A,(NEWKEYS)		;IF DUCK		BIT	BIT_KEY_DOWN,A			;THEN LEAVE		JP	NZ,DO_DUCKBLOK		AND	KEY_A+KEY_B		CP	KEY_A+KEY_B		JP	NZ,DO_STANCE		RET*****************************************	     DUCK AND KICK****************************************DO_DUCKKICK		LD	A,SEQ_KICKDUCK		JP	PLAY_ANI			*****************************************	        UPPERCUT****************************************DO_UPPERC			LD	A,SEQ_UPPERCPLAY_ANI	CALL	SET_ANI				CALL	ME_ON_TOPPLAY_UNTIL_END	MOVE	PUE1PUE1		CALL	DO_PROCS		LD	A,(ANIM_ENDED)		AND	A		RET	Z				JP	DO_STANCE	*********************************************************************************			  JOY STICK PUSHED UP ********************************************************************************JOY_UP		CALL	FACE_HIM		LDX	A,SBASE		CP	_GORO		JP	Z,GORO_JUMP    		LD	A,SEQ_JUMPUP		CALL	SET_ANI		CALL	TESTLR		STX	YSPD,-3		MOVE	JMPUP1JMPUP1		CALL	DO_PROCS		LD	A,(NEWTRIG)		BIT	BIT_KEY_A,A		JP	NZ,JMPPUNCH		BIT	BIT_KEY_B,A		JP	NZ,JMPKICK		RET*****************************************	       GORO JUMP****************************************GORO_JUMP	LD	A,SEQ_GORO_JUMP		JP	PLAY_ANI	*****************************************         TEST FOR LEFT OR RIGHT****************************************TESTLR		LD	A,(NEWKEYS)		AND	KEY_LEFT+KEY_RIGHT		RET	Z		CALL	IS_STICK_AWAY		JP	C,@JMP_RIGHT		LD	A,SEQ_SPINJMP		CALL	SET_ANI		LD	A,9		CALL	LOR_VEL		RET@JMP_RIGHT	LD	A,SEQ_SPINJMP		CALL	SET_ANI		LD	A,-8		CALL	LOR_VEL		RET*****************************************	  PUNCH WHILE JUMPING****************************************JMPPUNCH	LD	A,SEQ_JUMPPUNCH		JP	PLAY_ANI*****************************************	    KICK WHILE JUMPING****************************************JMPKICK		LD	A,SEQ_JUMPKICK		JP	PLAY_ANI*****************************************	    JUMP ANI END PROC****************************************JUMP_END_PROC	LDX	A,YCOORD		CP	GROUNDLEVEL		RET	NZ		MOVE	DO_STANCE		LD	A,SEQ_STANCE		JP	SET_ANI*********************************************************************************			 JOY STICK PUSHED LEFT ********************************************************************************JOY_RIGHT	CALL	FACE_HIM		CALL	FIND_MHD		CP	CLOSE_DIST		JP	NC,@NOTHROW		LD	A,(NEWKEYS)		BIT	BIT_KEY_A,A		JP	NZ,DO_THROW@NOTHROW	LD	A,(NEWTRIG)		BIT	BIT_KEY_B,A		CALL	NZ,ROUND_SWEEP  		LD	A,SEQ_WALK		BIT	7,C		JP	Z,@1		LD	A,SEQ_RWALK@1		CALL	SET_ANI	 	MOVE	JR1JR1		CALL	DO_PROCS		MOVE	JR2		RETJR2		CALL	FACE_HIM		CALL	DO_PROCS		LD	A,(NEWTRIG)		BIT    	BIT_KEY_A,A		JP	NZ,DO_PUNCH		BIT	BIT_KEY_B,A		CALL	NZ,ROUND_SWEEP		BIT    	BIT_KEY_UP,A	    		;IS UP BEING PUSHED		JP	NZ,DO_STANCE		LDX	A,XCOORD		LD	C,A		ADD	A,1		STX	XCOORD,A		LD	B,A		;CALL	BIND_X_C		CALL	PUSH_AWAY				LD	A,(NEWKEYS)		BIT	BIT_KEY_RIGHT,A		JP	Z,DO_STANCE		RET*********************************************************************************			 JOY STICK PUSHED RIGHT ********************************************************************************JOY_LEFT	CALL	FACE_HIM			CALL	FIND_MHD		CP	CLOSE_DIST		JP	NC,@NOTHROW		LD	A,(NEWKEYS)		BIT	BIT_KEY_A,A		JP	NZ,DO_THROW@NOTHROW	LD	A,(NEWTRIG)		BIT	BIT_KEY_B,A		CALL	NZ,ROUND_SWEEP		LD	A,SEQ_RWALK		BIT	7,C		JP	Z,@1		LD	A,SEQ_WALK@1		CALL	SET_ANI	 	MOVE	JL1JL1		CALL	DO_PROCS		MOVE	JL2		RETJL2		CALL	FACE_HIM		CALL	DO_PROCS		LD	A,(NEWTRIG)		BIT    	BIT_KEY_A,A		JP	NZ,DO_PUNCH		BIT	BIT_KEY_B,A		CALL	NZ,ROUND_SWEEP		BIT    	BIT_KEY_UP,A   		;IS UP BEING PUSHED		JP	NZ,DO_STANCE		LDX	A,XCOORD		LD	C,A		SUB	1		STX	XCOORD,A		LD	B,A		;CALL	BIND_X_C		CALL	PUSH_AWAY		LD	A,(NEWKEYS)		BIT	BIT_KEY_LEFT,A		JP	Z,DO_STANCE		RET*****************************************		PUSH AWAY****************************************PUSH_AWAY	CALL	FIND_MHD		CP	4		;5		RET	NC		LD	A,%00000011		CALL	SCAN_COL		RET	NC		CALL	AM_I_LEFT		JP	Z,@LEFT		JP	C,@LEFT		LDX	A,XCOORD		INC	A		STX	XCOORD,A		CALL	DEC_OTHER_X		RET@LEFT		LDX	A,XCOORD		DEC	A		STX	XCOORD,A		CALL	INC_OTHER_X		RETDEC_OTHER_X	LD	A,(SPRNUM)		CP	1		JP	Z,@DEC0	   	LDBA	XCOORD,1		DEC	A	   	STBA	XCOORD,1		RET@DEC0	   	LDBA	XCOORD,0		DEC	A	   	STBA	XCOORD,0		RETINC_OTHER_X	LD	A,(SPRNUM)		CP	1		JP	Z,@INC0	   	LDBA	XCOORD,1		INC	A	   	STBA	XCOORD,1		RET@INC0	   	LDBA	XCOORD,0		INC	A	   	STBA	XCOORD,0		RET*****************************************         ROUNDHOUSE OR SWEEP****************************************ROUND_SWEEP			CALL	STOP_GORO		LD	A,(NEWKEYS)		;TEST FOR LEFT AND RIGHT		AND	KEY_LEFT+KEY_RIGHT		RET	Z		POP	HL			;UNSTACK RETURN ADDRESS		CALL	IS_STICK_AWAY		JP	C,ROUND_HOUSE*****************************************		DO SWEEP****************************************SWEEPHIM	LD	A,SEQ_SWEEP		JP	PLAY_ANI*****************************************	      DO ROUNDHOUSE****************************************ROUND_HOUSE	LD	A,SEQ_RHOUSE		JP	PLAY_ANI*****************************************		DO KICK****************************************DO_KICK		CALL	STOP_GORO		CALL	FIND_MHD		CP	CLOSE_DIST		JP	C,DO_KNEE		LD	A,SEQ_KICKHIGH		JP	PLAY_ANI*****************************************		DO PUNCH****************************************DO_PUNCH			LDX	A,SBASE		CP	_GORO		JP	Z,GORO_PUNCH		CALL	RANDOM		AND	3		JP	NZ,@NOELBOW		CALL	FIND_MHD		CP	CLOSE_DIST		JP	C,DO_ELBOW	@NOELBOW	LD	A,SEQ_PUNCHI		CALL	SET_ANI		CALL	ME_ON_TOP		MOVE	PUN1		STX	D2,0			;TEMP VAR		CALL	DO_PROCS		RETPUN1		CALL	DO_PROCS		LD	A,(NEWTRIG)		BIT	BIT_KEY_A,A		JP	Z,@NOTRIG		STX	D2,#FF@NOTRIG		LD	A,(ANIM_ENDED)		AND	A		RET	Z				LDX	A,D2		AND	A		JP	Z,DO_STANCE		STX	D2,0		RET*****************************************	       GORO PUNCH****************************************GORO_PUNCH	LD	A,SEQ_GORO_BHAND		JP	PLAY_ANI*****************************************		DO ELBOW****************************************DO_ELBOW	LDX	A,SBASE		CP	_KANO		JP	Z,HEADBUTT		LD	A,SEQ_ELBOW		JP	PLAY_ANI*****************************************		DO KNEE****************************************DO_KNEE		LD	A,SEQ_KNEE		JP	PLAY_ANI*****************************************		DO PUNCH****************************************DO_STUMBLE	LD	A,SEQ_STUMBLE		CALL	SET_ANI		MOVE	STUMB1STUMB1		CALL	DO_ANIM			;DO ANIM		CALL	DO_COLLIS		;DO COLLISION TEST		CALL	DEC_ENERGY		LD	A,(STUMBLE_FLAG)	;SHALL I DIE		AND	A		JP	NZ,FALL_DEAD		LD	A,(ANIM_ENDED)		AND	A		RET	Z		JP	DO_STANCE1*****************************************	     FALL DOWN DEAD****************************************FALL_DEAD	LD	A,SEQ_DEAD		CALL	SET_ANIFALL_DEAD2	MOVE	FUCKEDFUCKED		CALL	DO_ANIM	     		;START STUMBLING		LD	A,(STUMBLE_FLAG)		AND	A		JP	NZ,@SET		LD	A,(I_STUMBLE)		;IF STUMBLE NEEDED JUMP		AND	A			;BACK		JP	NZ,DO_STUMBLE@SET		LD	A,(ANIM_ENDED)		AND	A		RET	Z		JP	DO_STANCE1*****************************************	     FALL DOWN DEAD****************************************DO_VICTORY	LD	A,SEQ_VICTORY		CALL	SET_ANI		MOVE	VIC1VIC1		CALL	DO_ANIM	     		;START STUMBLING		LD	A,(ANIM_ENDED)		AND	A		RET	Z		JP	DO_STANCE1*****************************************	       STOP GORO****************************************STOP_GORO	LDX	A,SBASE		CP	_GORO		RET	NZ		POP	DE		MOVE	DO_STANCE		RET*********************************************************************************	               FIRING WEAPONS FOR PLAYER1*               IF (OUTBYTE) = 1 MISSILE HAS NOT HIT*               IF (OUTBYTE) = 2 MISSILE HAS HIT********************************************************************************PLAYFIRE1	STX	XCOORD,0		STX	YCOORD,0		STX	CURANI,0		STX	ANIPTRL,0		STX	ANIPTRH,0		STX	MANSPRH,#FF		STX	LINKH,#FF		STX	ANIM,0		STX	XSPD,0		STX	YSPD,0		STX	XOFF,0		STX	YOFF,0		STX	FLAGS,DISABLE		STX	D0,0		;STAY THIS IS WEAPON FOR PLAYER 0		MOVE	WEAPON_MAIN		SPR	2      		;LOG INITIAL TASK		JP	PUTSPRWEAPON_MAIN	LDBA	OUTBYTE,0	;GET (OUTBYTE) FROM SPR 0 IN A		AND	A		RET	Z		;RETURN IF NO COMMANDS		LDBA	SBASE,0		;GET XCOORD		ADD	A,_WEAPONS		STX	SBASE,A		LDBA	XCOORD,0	;GET XCOORD		STX	XCOORD,A		STX	MANSPRH,#FF		STX	YCOORD,64+5 		LDBA	FLAGS,0		;GET MIRROR BIT		AND	1		STX	FLAGS,A		LD	A,SEQ_WEAPON_FIRE		CALL	SET_ANI		STX	D1,10		MOVE	DO_WEAP		CALL	DO_ANIM		RETDO_WEAP		CALL	DO_ANIM		LD	A,%00000110		;TEST FOR 1 AND 2		CALL	SCAN_COL		JP	C,HITPLAY1		LDX	A,D1		DEC	A		STX	D1,A		AND	A		RET	NZ		XOR	A		STBA	OUTBYTE,0	;SET (OUTBYTE) TO 0		MOVE	WEAPON_MAIN		STX	FLAGS,DISABLE		CALL	ROPE_OFF		RET*****************************************	      HIT PLAYER1****************************************HITPLAY1	LD	A,SEQ_WEAPON_HIT		LD	(SPRHIT1),A		LDX	A,SBASE		LD	(WHOHIT1),A		LD	A,SEQ_WEAPON_HIT		CALL	SET_ANI		MOVE	HP1HP1		CALL	DO_ANIM		LD	A,(ANIM_ENDED)		AND	A		RET	Z				XOR	A		STBA	OUTBYTE,0	;SET (OUTBYTE) TO 0		CALL	ROPE_OFF		MOVE	WEAPON_MAIN		STX	FLAGS,DISABLE		RET*********************************************************************************	               FIRING WEAPONS FOR PLAYER1********************************************************************************PLAYFIRE2	STX	XCOORD,0		STX	YCOORD,0		STX	CURANI,0		STX	ANIPTRL,0		STX	ANIPTRH,0		STX	MANSPRH,#FF		STX	LINKH,#FF		STX	ANIM,0		STX	XSPD,0		STX	YSPD,0		STX	XOFF,0		STX	YOFF,0		STX	FLAGS,DISABLE		STX	D0,0		;STAY THIS IS WEAPON FOR PLAYER 0		MOVE	WEAPON_MAIN2		SPR	3      		;LOG INITIAL TASK		JP	PUTSPRWEAPON_MAIN2	LDBA	OUTBYTE,1	;GET (OUTBYTE) FROM SPR 0 IN A		AND	A		RET	Z		;RETURN IF NO COMMANDS		LDBA	SBASE,1		;GET XCOORD		ADD	A,_WEAPONS		STX	SBASE,A		LDBA	XCOORD,1	;GET XCOORD		STX	XCOORD,A		STX	MANSPRH,#FF		STX	YCOORD,64+5 		LDBA	FLAGS,1		;GET MIRROR BIT		AND	1		STX	FLAGS,A		LD	A,SEQ_WEAPON_FIRE		CALL	SET_ANI		STX	D1,10		MOVE	DO_WEAP2		CALL	DO_ANIM		RETDO_WEAP2	CALL	DO_ANIM		LD	A,%00001001		;TEST FOR 1 AND 2		CALL	SCAN_COL		JP	C,HITPLAY2		LDX	C,D2		LDX	A,D1		DEC	A		STX	D1,A		AND	A		RET	NZ		XOR	A		STBA	OUTBYTE,1	;SET (OUTBYTE) TO 0		MOVE	WEAPON_MAIN2		STX	FLAGS,DISABLE		CALL	ROPE_OFF		RET*****************************************	      HIT PLAYER1****************************************HITPLAY2	LD	A,SEQ_WEAPON_HIT		LD	(SPRHIT0),A		LDX	A,SBASE		LD	(WHOHIT0),A		LD	A,SEQ_WEAPON_HIT		CALL	SET_ANI		MOVE	HP2HP2		CALL	DO_ANIM		LD	A,(ANIM_ENDED)		AND	A		RET	Z				XOR	A		STBA	OUTBYTE,1	;SET (OUTBYTE) TO 0		CALL	ROPE_OFF		MOVE	WEAPON_MAIN2		STX	FLAGS,DISABLE		RET*********************************************************************************			     UTILITY ROUTINES********************************************************************************	*****************************************     	      IS STICK AWAY*	   CARRY SET IF IT IS****************************************IS_STICK_AWAY	CALL	WHICH_SIDE		JP	C,@LEFT				LD	A,(NEWKEYS)		;RIGHT TEST		BIT    	BIT_KEY_LEFT,A		JP	NZ,@SETCY		OR	A		RET@SETCY		SCF		RET@LEFT		LD	A,(NEWKEYS)		;LEFT TEST		BIT    	BIT_KEY_RIGHT,A		JP	NZ,@SETCY		OR	A		RET*****************************************	       WHICH_SIDE*	       ~~~~~~~~~~*          WHICH SIDE AM I ON* CARRY SET IF ON LEFT OF OTHER PLAYER****************************************WHICH_SIDE	LD	A,(SPRNUM)		;AM I PLAYER1		AND	A		JP	Z,@PLAY1		;IF YES GO		XOR	A			;GET PLAYER 1 XPOS		CALL	GETSPRX		LD	E,A		LDX	A,XCOORD		SUB	E		RET@PLAY1		LD	A,1			;I MUST BE PLAYER 1		CALL	GETSPRX			;SO GET PLAYER 2 XPOS		LD	E,A		LDX	A,XCOORD		SUB	E		RET*****************************************	       FACE HIM*	       ~~~~~~~~*	   FACE MY OPPONENT****************************************FACE_HIM	LD	A,(SPRNUM)		;AM I PLAYER1		AND	A		JP	Z,@PLAY1		;IF YES GO						;I MUST BE PLAYER 2		XOR	A			;GET PLAYER 1 XPOS		CALL	GETSPRX		LD	E,A		LD	C,-1		LDX	A,XCOORD		SUB	E		JP	NC,@SETMIR		LD	C,1 		JP	@RESMIR@PLAY1		LD	A,1			;I MUST BE PLAYER 1		CALL	GETSPRX			;SO GET PLAYER 2 XPOS		LD	E,A		LD	C,-1		LDX	A,XCOORD		SUB	E		JP	NC,@SETMIR		LD	C,1@RESMIR		LDX	A,FLAGS		RES	0,A		STX	FLAGS,A		RET@SETMIR		LDX	A,FLAGS		SET	0,A		STX	FLAGS,A		RET*****************************************	     AM I FACING HIM*	     ~~~~~~~~~~~~~~~****************************************AM_I_FACING_HIM		LDX	A,FLAGS		;SAVE FLAGS		PUSH	AF		CALL	FACE_HIM		LDX	A,FLAGS		;GET CHANGES		AND	MIRROR		;IN MIRROR IN C		LD	C,A		POP	AF    		;RESTORE MIRROR		STX	FLAGS,A		AND	MIRROR		;GET MIRROR BIT		CP	C		;IF THE SAME ON CY		JP	NZ,@NOCY		SCF			;YES I AM		RET@NOCY		OR	A 		;NO IM NOT		RET*****************************************   ARE WE FACING THE SAME DIRECTION*   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~****************************************FACING_SAME	LDBA	FLAGS,0		AND	MIRROR		LD	C,A		LDBA	FLAGS,1		AND	MIRROR		CP	C		JP	NZ,@NOCY		SCF			;YES I AM		RET@NOCY		OR	A 		;NO IM NOT		RET*****************************************		ME ON TOP*		~~~~~~~~~*       GIVE ME GREATEST PRIORITY****************************************ME_ON_TOP	LD	A,(SPRNUM)		AND	A		JP	Z,@PLAY1		;Z		XOR	A		LD	(PRIORITY),A		RET@PLAY1		LD	A,1		LD	(PRIORITY),A		RET*****************************************		GET ENERGY*		~~~~~~~~~~****************************************GET_ENERGY	LD	A,(SPRNUM)		AND	A		JP	Z,@PLAY1		LD	HL,SPRENERGY1		RET@PLAY1		LD	HL,SPRENERGY0		RET*****************************************	 ADD TO A PLAYERS SCORE****************************************ADD_A_SCORE	LD	C,A		LD	A,1		LD	(BANKSEL),A		LD	DE,PLAY_1_SCORE		LD	A,(SPRNUM)		AND	A		JP	NZ,@HIT1		LD	DE,PLAY_2_SCORE@HIT1		LD	A,C		CALL	SCORE_A		RET*****************************************		DEC ENERGY****************************************DEC_FULL_ENERGY	LD	A,(HITSCORE)		CALL	ADD_A_SCORE		CALL	GET_ENERGY		LD	A,(HITPOWER)		;GET FULL HIT POWER		SWAP	A		AND	#0F		LD	C,A		LD	A,(HL)		AND	A		RET	Z		SUB	C		LD	(HL),A		RET	NC		LD	(HL),0		RET*****************************************		DEC ENERGY****************************************DEC_ENERGY	CALL	GET_ENERGY		LD	A,(HL)		AND	A		RET	Z		DEC	A		LD	(HL),A		RET*****************************************	      DEC BLOK ENERGY****************************************DEC_BLOK_ENERGY	CALL	GET_ENERGY		LD	A,(HITPOWER)		;GET FULL HIT POWER		AND	#0F		LD	C,A		LD	A,(HL)		AND	A		RET	Z		SUB	C		LD	(HL),A		RET	NC		LD	(HL),0		RET*****************************************		SET ENERGY****************************************FULL_STRENGTH	EQU	31SET_ENERGY	CALL	GET_ENERGY		LD	(HL),31		RET*****************************************            TEST FOR STUMBLE****************************************TEST_DEAD	CALL	GET_ENERGY		LD	A,(HL)		AND	A		JP	Z,@SETCY		OR	A		RET@SETCY		SCF		RET*****************************************	  RUN ALL MAJOR ROUTINES* THIS ROUTINE IS NEVER STACKED A MORE*	     THAN ONE LEVEL****************************************DO_PROCS			CALL	DRONE_TIMERS		CALL	MOVE_TEST		JP	C,@HIT		CALL	DO_ANIM		CALL	DO_COLLIS		CALL	TEST_DEAD		JP	C,@STUMBLE		LD	A,(VICTORY_FLAG)		AND	A		RET	Z		LD	C,A		LD	A,(SPRNUM)	;CHECK THIS IS THE RIGHT PLAYER		INC	A		CP	C		RET	NZ		POP	DE		;UNSTACK THIS LEVEL		JP	DO_VICTORY@HIT		POP	DE		;UNSTACK THIS LEVEL		JP	(HL)		;JUMP TO REACTION HANDLER@STUMBLE	POP	DE		;UNSTACK THIS LEVEL		JP	DO_STUMBLE*****************************************	      INC TIMERS****************************************DRONE_TIMERS	LDX	A,FLAGS		BIT	DRONEBIT,A		RET	Z		LDX	A,PROJTIME		INC	A		JP	C,@1		STX	PROJTIME,A@1		LDX	A,SUPERTIME		INC	A		RET	C		STX	SUPERTIME,A				RET*****************************************        SPECIAL MOVES TESTING****************************************ACT_TIME	EQU	3	;4MOVE_TEST	LDX	A,KEYPTR_H		;GET KEY POINTER		AND	A			;IF WERE SCANNING A LIST		JP	NZ,STILL_TEST		;KEEP DOING IT		LD	HL,SEQLIST		;LOOK FOR LIST		LD	A,(FINISH_HIM)		AND	A		JP	Z,@LOOP		LD	HL,FATALSEQLIST		;LOOK FOR LIST@LOOP		PUSH	HL		LD	A,(HL)		 	;GET PLAYER FOR MOVE		CP	#FF  			;IF #FF END OF LIST		JP	Z,@NONE			;LEAVE		LD	B,A		LDX	A,SBASE			;IS THIS THE RIGHT PLAYER ?		CP	B		JP	NZ,@NEXT		;JUMP IF NOT				INC	HL			;STEP OVER PLAYER		LD	B,(HL)			;GET START SEQUENCE		LDX	A,CURANI		;GET CURRENT ANIM		CP	B			;ARE WE IN THIS ANIM ?		JP	NZ,@NEXT		;JUMP IF NOT		INC	HL			;SKIP		LD	A,(HLI)			;STORE SEQ ADDRESS		STX	KEYTEMP_L,A				LD	A,(HLI)			;STORE SEQ ADDRESS		STX	KEYTEMP_H,A							STX	KEYPTR_L,L		;SET UP SEQ SCAN POINTER		STX	KEYPTR_H,H		STX	KEYTIME,ACT_TIME@NONE		POP	HL			;RETURN		OR	A		RET@NEXT		POP	HL  			;RESTORE ENTRY POINTER		LD	DE,16		ADD	HL,DE			;GET NEXT ENTRY		JP	@LOOP*****************************************      STILL TEST FOR A SEQUENCE****************************************STILL_TEST	LDX	L,KEYPTR_L		LDX	H,KEYPTR_H		LD	A,(HL)		CP	#FF		JP	Z,@FINISHED		LD	B,A		LDX	A,CURANI		CP	B		JP	Z,@FOUNDSEQ		LDX	A,KEYTIME		DEC	A		JP	Z,@ENDSEQ		STX	KEYTIME,A		OR	A		RET@ENDSEQ		STX	KEYPTR_H,0 		;END THIS SEQUENCE		OR	A   			;AS TIMEOUT EXPIRED 		RET@FOUNDSEQ	STX	KEYTIME,ACT_TIME	;FOUND THIS KEY						;SET TIMEOUT		INC	HL			;GET NEXT KEY		STX	KEYPTR_L,L		STX	KEYPTR_H,H		OR	A		RET@FINISHED	LDX	L,KEYTEMP_L		;GET SEQUENCE ADDRESS		LDX	H,KEYTEMP_H		STX	KEYPTR_H,0 		;END THIS SEQUENCE		SCF		RET***************************************** 	        STOP ME*	        ~~~~~~~* STOPS WALKING INTO OTHER PLAYER AND*     FORCES ME OUT OF HIS SPACE****************************************STOP_ME		RET*****************************************	        BIND ME*		~~~~~~~*   BIND A PLAYERS X POSITION TO THE*      LIMITS OF THE SCROLL AREA****************************************BIND_ME		RET*****************************************        GET MANHATTEN DISTANCE****************************************FIND_MHD	LDBA	XCOORD,0		LD	B,A		LDBA	XCOORD,1		SUB	B		JP	C,@NEG		RET@NEG		CPL		INC	A		RET*****************************************	        OLD SHITE****************************************FIND_MHD2	LDBA	XCOORD,0		LD	B,A		LDBA	XCOORD,1		SUB	B		JP	C,@NEG		AND	A		RET	Z		DEC	A		RET@NEG		CPL		INC	A		RET*****************************************     GET MANHATTEN DISTANCE IN Y****************************************FIND_MHD_Y	LDBA	YCOORD,0		LD	B,A		LDBA	YCOORD,1		SUB	B		BIT	7,A		JP	NZ,@NEG		AND	A		RET	Z		DEC	A		RET@NEG		CPL		INC	A		RET*****************************************	     GET X POSITION****************************************GETXPOS		LD	A,(SPRNUM)		AND	A		JP	Z,@IM0			       		;I MUST BE 1		LDBA	XCOORD,0		RET@IM0		LDBA	XCOORD,1		RET*****************************************    FIND OUT WHO THE OTHER GUY IS ?****************************************OTHER_GUY	LD	A,(SPRNUM)		AND	A		JP	Z,@IM0			       		;I MUST BE 1		LDBA	SBASE,0		RET@IM0		LDBA	SBASE,1		RET*****************************************		AM I LEFT*		~~~~~~~~~* AM I TO THE LEFT OF THE OTHER PLAYER*          CARRY SET IF LEFT**	       IS HE RIGHT*	       ~~~~~~~~~~~* IF OTHER PLAYER IS TO THE RIGHT OF ME*            THEN CARRY SET*****************************************IS_HE_RIGHT	EQU	$AM_I_LEFT	LD	A,(SPRNUM)		AND	A		JP	Z,@SPR0		LDBA	XCOORD,0		LD	B,A		LDBA	XCOORD,1		SUB	B		RET@SPR0		LDBA	XCOORD,1		LD	B,A		LDBA	XCOORD,0		SUB	B		RET*****************************************	FIND TELEPORT LOCATION*	~~~~~~~~~~~~~~~~~~~~~~****************************************FIND_TELE	CALL	GETXPOS		;GET OTHER PLAYERS XCOORD		LD	L,A		LD	C,L		CALL	ONSCR_X@OK		CALL	AM_I_LEFT		JP	C,@IM_LEFT@IM_RIGHT	LD	A,C		CP	5		JP	C,@NEARR		LD	A,L		SUB	6		STX	D0,A		RET@NEARR		LD	A,L		ADD	A,6		STX	D0,A		RET@IM_LEFT	LD	A,C		CP	17		JP	NC,@NEARL		LD	A,L		ADD	A,6		STX	D0,A		RET@NEARL		LD	A,L		SUB	6		STX	D0,A		RET*****************************************	       HOME TO D0****************************************HOME_D0		LDX	C,XCOORD		LDX	A,D0		CP	C		RET	Z		JP	C,@LEFT@RIGHT		INC	C		STX	XCOORD,C		RET@LEFT		DEC	C		STX	XCOORD,C		RET*****************************************	       HOME TO D0****************************************HOME_END	LDX	C,XCOORD		LDX	A,D0		CP	C		RET	NZ		STX	LOOPCOUNT,1		RET*****************************************	      SET X TO D0****************************************SET_D0		LDX	A,D0		STX	XCOORD,A		RET*********************************************************************************             		       SEQUENCE LIST********************************************************************************SEQLIST DB	_RAIDEN,SEQ_DUCK DW	RAIDENTELE DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,#FF,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_RAIDEN,SEQ_RWALK DW	RAIDENDIVE DB	SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_WALK DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_RAIDEN,SEQ_WALK DW	FIRE_IT DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_PUNCHI,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF**************************************** DB	_LIZ,SEQ_RWALK DW	FIRE_IT DB	SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_PUNCHI,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_LIZ,SEQ_DUCK DW	LIZ_SCISSOR DB	SEQ_STANCE,SEQ_HIBLOCK,#FF,#FF,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_LIZ,SEQ_WALK DW	SUPERLIZ DB	SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_WALK DB	#FF,#FF,#FF,#FF,#FF,#FF**************************************** DB	_KANO,SEQ_RWALK DW	FIRE_IT DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_PUNCHI,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_KANO,SEQ_STANCE DW	KANOSPIN DB	SEQ_WALK,SEQ_STANCE,SEQ_DUCK,SEQ_STANCE,SEQ_RWALK,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF**************************************** DB	_KANG,SEQ_WALK DW	KANGKICK DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_KICKHIGH,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_KANG,SEQ_RWALK DW	FIRE_IT DB	SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_PUNCHI,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF**************************************** DB	_SUBZERO,SEQ_RWALK DW	FIRE_IT DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_KICKHIGH,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_SUBZERO,SEQ_WALK DW	SZ_SLIDE DB	SEQ_STANCE,SEQ_DUCK,SEQ_STANCE,SEQ_PUNCHI,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF**************************************** DB	_SCORPION,SEQ_RWALK DW	FIRE_IT DB	SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_PUNCHI,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_SCORPION,SEQ_WALK DW	SCORP_TELE DB	SEQ_STANCE,SEQ_DUCK,SEQ_STANCE,#FF,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF**************************************** DB	_GORO,SEQ_RWALK DW	FIRE_IT DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_HIBLOCK,#FF,#FF DB	#FF,#FF,#FF,#FF,#FF,#FF*****************************************	     END OF TABLE**************************************** DB	#FF*****************************************	FATALITY KEY SEQUENCES****************************************FATALSEQLIST DB	_RAIDEN,SEQ_RWALK DW	DO_FATAL_MOVE DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_DUCK,SEQ_STANCE,SEQ_HIBLOCK DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_KANO,SEQ_DUCK DW	DO_FATAL_MOVE DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_KICKHIGH DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_KANG,SEQ_WALK DW	DO_FATAL_MOVE DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_PUNCHI DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_SCORPION,SEQ_WALK DW	DO_FATAL_MOVE DB	SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_HIBLOCK DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_SUBZERO,SEQ_WALK DW	DO_FATAL_MOVE DB	SEQ_STANCE,SEQ_DUCK,SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_PUNCHI DB	#FF,#FF,#FF,#FF,#FF,#FF DB	_LIZ,SEQ_RWALK DW	DO_FATAL_MOVE DB	SEQ_STANCE,SEQ_RWALK,SEQ_STANCE,SEQ_WALK,SEQ_STANCE,SEQ_HIBLOCK DB	#FF,#FF,#FF,#FF,#FF,#FF*****************************************	     END OF TABLE**************************************** DB	#FF