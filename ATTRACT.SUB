*****************************************       ATTRACT MODE ENTRY POINT****************************************ATTRACT	     	CALL	INIT_INTRO_SCR		CALL	SET_CHR_BOX		XOR	A		LD	(BIONUM),A		LD	(CHANSEL),A		CALL	SHOW_LOGOS		CALL	SORTHIGHSATTRACT_ENTRY	LD	A,6		LD	(CREDITS),A		CALL	INIT_INTRO_SCR		CALL	SET_CHR_BOXAMODE_LOOP	LD	A,1		CALL	PLAY_MUSIC		CALL	TITLE_SCREEN		CALL	PRINT_RANKINGS		CALL	SHOW_BIO		LD	A,1		CALL	PLAY_MUSIC		CALL	COIN_PAGE		CALL	DEMO_FIGHT			    		CALL	DEMO_FIGHT		LD	A,0		CALL	PLAY_MUSIC		CALL	GORO_LIVES		CALL	DEMO_FIGHT		LD	A,1		CALL	PLAY_MUSIC		CALL	COIN_PAGE		JP	AMODE_LOOP*****************************************        DISPLAY TITLE SCREEN****************************************TITLE_SCREEN		CALL	CLS		CALL	SET_CHR_BOX		CALL	PRINTF		DB	AT,9,3,"MIDWAY PRESENTS",STOP		CALL	FADE_IN		LD	BC,200		CALL	ATT_WAIT			CALL	FADE_OUT		CALL	CLS		LD	HL,TITLE_SCR		LD	DE,TITLE_MAP		CALL	SHOW_SCR_0		CALL	FADE_IN		LD	BC,500		CALL	ATT_WAIT		;ATT_WAIT		CALL	FADE_OUT		RET*****************************************        DISPLAY TITLE SCREEN****************************************SHOW_LOGOS	CALL	CLS		CALL	SET_CHR_BOX		CALL	PRINTF		DB	AT,01,3,"MORTAL KOMBAT#"		DB	AT,02,3,"@1993 ACCLAIM"		DB	AT,03,1,"ENTERTAINMENT, INC."		DB	AT,05,3,"MORTAL KOMBAT#"		DB	AT,06,0,"@1992 LICENSED FROM"		DB	AT,07,6,"MIDWAYœ"		DB	AT,08,3,"MANUFACTURING"		DB	AT,09,6,"COMPANY."		DB	AT,10,0,"ALL RIGHTS RESERVED."		DB	AT,12,3,"PROGRAMMED BY"		DB	AT,13,1,"PROBE SOFTWARE LTD."		;DB	AT,15,0,"LICENSED BY NINTENDO"		DB	AT,15,0,"                    "		DB	STOP		CALL	FADE_IN		LD	BC,150		CALL	NO_LINK_WAIT		CALL	FADE_OUT		CALL	CLS		LD	HL,ACCLAIM_SCR		LD	DE,ACCLAIM_MAP		CALL	SHOW_SCR_0		CALL	FADE_IN		LD	BC,150		CALL	NO_LINK_WAIT		CALL	FADE_OUT		CALL	CLS		LD	HL,PROBE_SCR		LD	DE,PROBE_MAP		CALL	SHOW_SCR_0		CALL	FADE_IN		LD	BC,150		CALL	NO_LINK_WAIT		CALL	FADE_OUT			RET*****************************************	  FLASH PRESS START****************************************FLASH_START	LD	HL,TIME		INC	(HL)		LD	A,(HL)		AND	%00010000		JP	NZ,@CLR		CALL	PRINTF		DB	AT,13,7,"PRESS"		DB	AT,14,7,"START",STOP		RET@CLR		CALL	PRINTF		DB	AT,13,7,"     "		DB	AT,14,7,"     ",STOP			RET*****************************************        DISPLAY RANKINGS****************************************SHOW_CONTINUE		CALL	INIT_INTRO_SCR		CALL	CLS		CALL	SET_CHR_BOX		LD	A,(CREDITS)		AND	A		JP	Z,@NOCREDITS		LD	A,10		LD	(GAMETIME),A		LD	A,4			;CONTINUE MUSIC		CALL	PLAY_MUSIC		CALL	PRINTF		DB	AT,06,5,"PRESS START"		DB	AT,07,4,"CONTINUE GAME"		DB	STOP		LD	A,(PLAYERS)		CP	2		JP	Z,@NOCRED		CALL	PRINTF		DB	AT,11,6,"CREDITS "		DB	STOP		LD	A,(CREDITS)		ADD	A,48		CALL	FCHAR@NOCRED		CALL	FADE_IN@COUNTDOWN	LD	BC,#0909		CALL	SETPOS		LD	A,(GAMETIME)		LD	L,A		LD	H,0		CALL	FNUM2				LD	B,60@LOOP		PUSH	BC		CALL	GETKEYS		CALL	LINK_AND_FLY		CALL	DODOWN		POP	BC				LD	A,(KEYS)		BIT	3,A		JP	NZ,@CONTINUE		LD	A,(INKEYS)		BIT	3,A		JP	NZ,@CONTINUE		DJNZ	@LOOP		LD	HL,GAMETIME		DEC	(HL)		LD	A,(HL)		CP	#FF		JP	NZ,@COUNTDOWN		CALL	FADE_OUT@NOCREDITS	LD	A,6		LD	(CREDITS),A		CALL	PRINT_RANKINGS		JP	ATTRACT_ENTRY@CONTINUE	LD	A,(PLAYERS)		CP	2		JP	Z,@CONTINUE2		CALL	FADE_OUT		LD	HL,CREDITS		DEC	(HL)		CALL	CLS		LD	SP,STACK		JP	CONT_GAME@CONTINUE2	CALL	FADE_OUT		CALL	CLS		LD	SP,STACK		JP	TWO_PLAYER_GAME*****************************************        SHOW END OF GAME STUFF****************************************SHOW_ENDGAME		CALL	INIT_INTRO_SCR		CALL	TRY_HIGHSCORE		CALL	PRINT_RANKINGS		JP	ATTRACT_ENTRY*****************************************            TRY FOR HIGHSCORE*	     ~~~~~~~~~~~~~~~~~* 	     DE = SCORE TO TEST*             C = WINS IN A ROW****************************************TRY_HIGHSCORE	LD	A,(PLAYERS)		;DONT ENTER HIGH SCORES IN		CP	2			;TWO PLAYER GAMES		RET	Z			LD	DE,PLAY_1_SCORE		LD	A,(WINS_IN_ROW)		LD	C,A		LD	HL,HSLAST		;SET UP HIGH SCORE ENTRY		XOR	A     			;CLEAR OUT NAME		LD	(HLI),A		LD	(HLI),A		LD	(HLI),A		LD	A,C			;PUT IN WINS		LD	(HLI),A		LD	A,(DE)			;PUT IN SCORE		LD	(HLI),A		INC	DE		LD	A,(DE)		LD	(HLI),A		INC	DE		LD	A,(DE)		LD	(HLI),A		INC	DE		LD	A,(DE)		LD	(HLI),A		CALL	SORTHIGHS		LD	A,(HSLAST)		;GOT INTO THE HIGHSCORES		AND	A		RET	Z			;RET IF NOT		LD	A,2			;PLAY MUSIC & GAME CREDITS		CALL	PLAY_MUSIC		CALL	INIT_INTRO_SCR		CALL	CLS		CALL	SET_CHR_BOX		CALL	PRINTF		DB	AT,7,5,"ENTER YOUR"		DB	AT,8,6,"INITIALS"		DB	STOP		CALL	FADE_IN		CALL	FIND_HS_ENTRY		PUSH	HL		LD	A,65    			;CLEAR NAME TO AAA		LD	(HLI),A		LD	(HLI),A		LD	(HLI),A		POP	HL					XOR	A		LD	(HSPOS),AHSENTRYLOOP	PUSH	HL		CALL	WAIT_FLY		CALL	GETKEYS		POP	HL		PUSH	HL		CALL	HS_KEYS		POP	HL		PUSH	HL		LD	B,10		;PRINT THIS ENTRY		LD	C,3		CALL	ENTRY		POP	HL		LD	A,(KEYS)		AND	%11111110		JP	NZ,RELEASELOOP		LD	A,(KEYS)		BIT	0,A		JP	Z,HSENTRYLOOP		LD	A,3			;PLAY GAME OVER		CALL	PLAY_MUSIC		CALL	FADE_OUT		RET*****************************************	 WAIT FOR KEY RELEASE****************************************RELEASELOOP	PUSH	HL		CALL	WAIT_FLY		CALL	GETKEYS		POP	HL		PUSH	HL		LD	B,10		;PRINT THIS ENTRY		LD	C,3		CALL	ENTRY		POP	HL		LD	A,(KEYS)		AND	A		JP	NZ,RELEASELOOP		JP	HSENTRYLOOP*****************************************	   DO HIGH SCORE KEYS****************************************HS_KEYS		LD	A,(KEYS)		BIT	BIT_KEY_LEFT,A		JP	NZ,@LEFT		BIT	BIT_KEY_RIGHT,A		JP	NZ,@RIGHT		BIT	BIT_KEY_UP,A		JP	NZ,@UP		BIT	BIT_KEY_DOWN,A		JP	NZ,@DOWN		RET@LEFT		LD	A,(HSPOS)		DEC	A		CP	#FF		JP	NZ,@NOTL		LD	A,2@NOTL		LD	(HSPOS),A		RET	@RIGHT		LD	A,(HSPOS)		INC	A		CP	3		JP	NZ,@NOTR		XOR	A@NOTR		LD	(HSPOS),A		RET	@UP		LD	A,(HSPOS)		LD	C,A		LD	B,0		ADD	HL,BC		CALL	HSNEXT		RET@DOWN		LD	A,(HSPOS)		LD	C,A		LD	B,0		ADD	HL,BC		CALL	HSPREV		RET*****************************************	       GET NEXT CHR****************************************HSNEXT		LD	A,(HL)		CP	"Z"		JP	Z,GOTO_SP		CP	" "		JP	Z,GOTO_A		INC	(HL)		RETHSPREV		LD	A,(HL)		CP	"A"		JP	Z,GOTO_SP		CP	" "		JP	Z,GOTO_Z		DEC	(HL)		RETGOTO_A		LD	(HL),65		RETGOTO_Z		LD	(HL),"Z"		RETGOTO_SP		LD	(HL)," "		RET*****************************************	FIND HIGHSCORE NEW ENTRY****************************************FIND_HS_ENTRY	LD	HL,HS1		LD	DE,8		LD	B,7@LOOP		LD	A,(HL)		AND	A		JP	Z,@FOUND		ADD	HL,DE		DJNZ	@LOOP		SCF		RET@FOUND		OR	A		RET*****************************************        DISPLAY RANKINGS****************************************PRINT_RANKINGS	CALL	CLS		CALL	SET_CHR_BOX		CALL	CHR_BLACK		CALL	PRINTF		DB	BOX,0,1,18,18		DB	AT,1,7,"LONGEST"		DB	AT,2,3,"WINNING STREAKS",STOP		CALL	PRHIGHS		CALL	FADE_IN		LD	BC,500		CALL	ATT_WAIT		CALL	FADE_OUT		RET*****************************************	 PRINT HIGH SCORE TABLE****************************************PRHIGHS		LD	HL,HS1		LD	B,7		LD	C,4@1		PUSH	BC		LD	B,C		LD	C,3		CALL	ENTRY		POP	BC		LD	DE,8		ADD	HL,DE		INC	C		INC	C		DJNZ	@1		RET*****************************************         PRINT ONE HIGH SCORE****************************************ENTRY		PUSH	HL		PUSH	HL		CALL	SETPOS		POP	HL		LD	A,(HLI)		;PRINT NAME 3 LETTERS		CALL	FCHAR		LD	A,(HLI)		CALL	FCHAR		LD	A,(HLI)		CALL	FCHAR		CALL	SPACE		LD	A,(HLI)		;GET WINS IN ROW		PUSH	HL		LD	L,A		LD	H,0		CALL	FNUM2		POP	HL		CALL	SPACE		CALL	PRINT_BCD		POP	HL		RET*****************************************       PRINT 8 DIGIT BCD NUMBER****************************************PRINT_BCD	LD	BC,3 		;GET MOST SIGNIFICANT PART		ADD	HL,BC		LD	B,4@LOOP		LD	A,(HL)		SWAP	A		AND	#0F		ADD	A,48		CALL	FCHAR		LD	A,(HL)		AND	#0F		ADD	A,48		CALL	FCHAR		DEC	HL		DJNZ	@LOOP		RET*****************************************    COPY FACTORY HIGH SCORE TABLE****************************************COPYHIGHS	LD	HL,HSCOPY		LD	DE,HS1		LD	BC,HSEND-HSCOPYLDIR		LD	A,(HLI)		LD	(DE),A		INC	DE		DEC	BC		LD	A,B		OR	C		JP	NZ,LDIR		RET*****************************************          HIGH SCORE TABLE****************************************HSCOPY		DB	"ARH"		DB	10		BCD	03,35,67,90		DB	"MIA"		DB	9		BCD	03,21,03,30		DB	"TIM"		DB	9		BCD	03,15,55,60		DB	"GRL"		DB	8		BCD	02,44,77,80		DB	"JAY"		DB	8		BCD	02,25,56,30		DB	"JOB"		DB	7		BCD	01,22,63,60		DB	"EJB"		DB	6		BCD	01,70,00,00		DB	"   "		DB	0		BCD	00,00,00,00HSEND		EQU	$*****************************************	     SORT HIGH SCORES****************************************SORTHIGHS	XOR	A		LD	(SORTFLAG),A		LD	HL,HS1		;HL = HIGH SCORE TABEL		LD	B,7		;DO 7 SWAPS@LOOP		PUSH	HL		PUSH	BC		CALL	SORTSWAP		POP	BC		POP	HL		LD	DE,8		;ENTRY LEN		ADD	HL,DE			DJNZ	@LOOP		LD	A,(SORTFLAG)		AND	A		JP	NZ,SORTHIGHS		RET*****************************************	  HIGH SCORE SORT SWAP****************************************SORTSWAP	LD	B,H		;HL = TOP ENTRY		LD	C,L		;STORE HL IN BC		LD	DE,3 		;SKIP OVER NAME		ADD	HL,DE		;HL = WINS		PUSH	HL		;SAVE POS		LD	DE,8		;GET NEXT ENTRY WINS		ADD	HL,DE		;HL = 2ND ENTRY WINS		POP	DE		;DE = 1ST ENTRY WINS		LD	A,(DE)		;COMPAIR AMOUNT OF WINS		CP	(HL)		JP	Z,@SAME		RET	NC		;JUMP IF 2ND ENTRY BIGGER		JP	@SWAP@SAME		INC	HL		;GET 2ED ENTRY SCORE		INC	DE		;GET 1ST ENTRY SCORE		PUSH	BC		CALL	TEST_SCORE		POP	BC		RET	Z		RET	NC		;RET IF GREATER@SWAP		LD	A,1		;SAY A SWAP HAS OCCURD		LD	(SORTFLAG),A		LD	H,B		;HL = ENTRY 1		LD	L,C		PUSH	HL		LD	DE,8		ADD	HL,DE		;GET 2ED ENTRY		POP	DE		;GET 1ST ENTRY		LD	B,8		;SWAP 8 CHRS@SWAPLOOP	PUSH	BC		LD	C,(HL)		LD	A,(DE)		LD	(HLI),A		LD	A,C		LD	(DE),A		INC	DE		POP	BC		DJNZ	@SWAPLOOP		RET*****************************************	      ADD SCORE*	      ~~~~~~~~~*	  SCORE HL > SCORE DE*	     CARRY IF YES*     ZERO FLAG SET IF BOTH EQUAL****************************************TEST_SCORE	INC	HL		INC	HL		INC	HL		INC	DE		INC	DE		INC	DE		LD	A,(DE)		CP	(HL)		RET	NZ		DEC	HL		DEC	DE		LD	A,(DE)		CP	(HL)		RET	NZ		DEC	HL		DEC	DE		LD	A,(DE)		CP	(HL)		RET	NZ		DEC	HL		DEC	DE		LD	A,(DE)		CP	(HL)		RET*****************************************        DISPLAY COIN PAGE****************************************COIN_PAGE	CALL	CLS		CALL	SET_CHR_BOX		CALL	SET_FACES		CALL	CHR_BLACK		CALL	PRINTF		DB	BOX,00,04,18,12		DB	AT,4,5,"CREDITS "		DB	STOP		LD	A,(CREDITS)		ADD	A,48		CALL	FCHAR		LD	A,0		LD	(FACEPOS1),A		LD	A,16+4		LD	(FACEPOS2),A		CALL	FACE_PRINT		CALL	FADE_IN		LD	BC,500		LD	HL,FLASH_START		CALL	CALL_WAIT		LD	HL,FACE_SCROLL		LD	BC,500		CALL	CALL_WAIT		CALL	FADE_OUT		RETFACE_SCROLL	CALL	FLASH_START		LD	A,(TIME)		BIT	6,A		RET	NZ		AND	63		CP	64-21		RET	C		CALL	FACE_PRINT		JP	NEXT_FACEFACE_PRINT	LD	A,(FACEPOS1)		LD	E,A		LD	C,0		CALL	FACE_LIST		LD	A,(FACEPOS2)		LD	E,A		LD	C,16		JP	FACE_LISTNEXT_FACE	LD	A,(FACEPOS1)		INC	A		CP	40		JP	C,@F1    		XOR	A@F1		LD	(FACEPOS1),A		LD	A,(FACEPOS2)		DEC	A		CP	#FF		JP	C,@F2    		LD	A,39@F2		LD	(FACEPOS2),A		RET*****************************************	PRINT A LIST OF 18 FACES*		C = XPOS****************************************FACE_LIST	LD	B,0		LD	D,18@LOOP		CALL	FACE_LINE		INC	E		INC	B		DEC	D		JP	NZ,@LOOP		RET*****************************************	      PRINT A FACE*	       BC = XYPOS*		A = FACE****************************************A_FACE		LD	E,A		ADD	A,A			ADD	A,A		ADD	A,E		LD	E,A			LD	D,5@LOOP		CALL	FACE_LINE		INC	E		INC	B		DEC	D		JP	NZ,@LOOP		RET*****************************************	PRINT ONE LINE OF FACES****************************************FACE_LINE	PUSH	BC		PUSH	DE		CALL	SETPOS		POP	DE		LD	L,E		LD	H,0		ADD	HL,HL		ADD	HL,HL		LD	BC,MAPRAM		ADD	HL,BC		LD	A,(HLI)		ADD	A,50		CALL	CHAR		LD	A,(HLI)		ADD	A,50		CALL	CHAR		LD	A,(HLI)		ADD	A,50		CALL	CHAR		LD	A,(HLI)		ADD	A,50		CALL	CHAR		POP	BC		RET*****************************************	BEWARE.... GORO LIVES****************************************GORO_LIVES	CALL	CLS		CALL	SET_CHR_BOX		LD	HL,GORO_SCR		LD	DE,GORO_MAP		CALL	SHOW_COMPRESSED_PIC		CALL	PRINTF		DB	AT,0,0,"GORO LIVES...",STOP		LD	A,(GOROFLAG)		AND	A		JP	Z,@NOPE		CALL	PRINTF		DB	AT,17,11,"AS YOU...",STOP@NOPE		CALL	FADE_IN		LD	BC,200		CALL	ATT_WAIT		CALL	FADE_OUT		LD	A,(GOROFLAG)		AND	A		RET	NZ		CALL	CLS		CALL	SET_CHR_BOX		CALL	SET_FACES		CALL	PRINTF		DB	BOX,0,7,7,6		DB	STOP		CALL	GORO_BIO			CALL	FADE_IN		LD	BC,500		CALL	ATT_WAIT		CALL	FADE_OUT		RET*********************************************************************************SHOW_BIO	CALL	CLS		CALL	SET_CHR_BOX		CALL	SET_FACES		CALL	CHR_BLACK		;GRL		CALL	PRINTF		DB	BOX,0,7,7,6		DB	STOP		LD	A,(BIONUM)		LD	E,A		CALL	PRINT_BIO	 		CALL	FADE_IN		LD	BC,500		CALL	ATT_WAIT		CALL	FADE_OUT		LD	A,(BIONUM)		INC	A		CP	6		JP	NZ,@OK		XOR	A@OK		LD	(BIONUM),A		RET*****************************************        PRINT PLAYER BIOGRAPHY****************************************BIO_TABLE	DW	KANO_BIO		DW	RAID_BIO		DW	KANG_BIO		DW	SCOR_BIO		DW	SUBZ_BIO		DW	LIZ_BIOPRINT_BIO	LD	A,E		ADD	A,A		LD	C,A		LD	B,0		LD	HL,BIO_TABLE		ADD	HL,BC		LD	A,(HLI)		LD	H,(HL)		LD	L,A		JP	(HL)KANO_BIO	CALL	PRINTF		;                01234567890123456789		DB	AT,08,8,"KANO"		DB	AT,10,1,"A MERCENARY, THUG,"		DB	AT,11,2,"EXTORTIONIST AND"		DB	AT,12,1,"THIEF, KANO LIVES"		DB	AT,13,0,"A LIFE OF CRIME AND"		DB	AT,14,1,"IS A MEMBER OF THE" 		DB	AT,15,3,"BLACK DRAGON."		DB	STOP		LD	BC,#0108		LD	A,0		CALL	A_FACE		RETRAID_BIO	CALL	PRINTF		;                01234567890123456789		DB	AT,08,7,"RAYDEN"		DB	AT,10,1,"THE NAME RAYDEN IS"		DB	AT,11,2,"ACTUALLY THAT OF"		DB	AT,12,0,"A DEITY KNOWN AS THE"		DB	AT,13,1,"THUNDER GOD, IT IS		DB	AT,14,1,"SAID HE TOOK HUMAN"		DB	AT,15,1,"FORM TO COMPETE IN"		DB	AT,16,3,"THE TOURNAMENT."		DB	STOP		LD	BC,#0108		LD	A,1		CALL	A_FACE		RETKANG_BIO	CALL	PRINTF		;                01234567890123456789		DB	AT,08,6,"LIU KANG"		DB	AT,10,0,"   REPRESENTS THE"		DB	AT,11,0," SHAOLIN TEMPLES IN"		DB	AT,12,0,"THE TOURNAMENT, KANG"		DB	AT,13,0,"  IS STRONG IN HIS"		DB	AT,14,0,"BELIEFS AND DESPISES"		DB	AT,15,0,"    SHANG TSUNG."		DB	STOP		LD	BC,#0108		LD	A,2		CALL	A_FACE		RETSCOR_BIO	CALL	PRINTF		;                01234567890123456789		DB	AT,08,6,"SCORPION"		DB	AT,10,0,"SCORPIONS TRUE NAME"		DB	AT,11,0," AND ORIGIN ARE NOT"		DB	AT,12,0,"KNOWN. HE HAS SHOWN"		DB	AT,13,0," FROM TIME TO TIME"		DB	AT,14,0,"DISTRUST AND HATRED"		DB	AT,15,0,"  TOWARDS SUBZERO."		DB	STOP		LD	BC,#0108		LD	A,3		CALL	A_FACE		RETSUBZ_BIO	CALL	PRINTF		;                01234567890123456789		DB	AT,08,6,"SUBZERO"		DB	AT,10,0," THE ACTUAL NAME OR"		DB	AT,11,0,"  IDENTITY OF THIS"		DB	AT,12,0," WARRIOR IS UNKNOWN"		DB	AT,13,0,"   IT IS BELIEVED"		DB	AT,14,0," HE BELONGS TO THE"		DB	AT,15,0,"    LIN KUEI, A"		DB	AT,16,0," LEGENDARY CLAN OF"		DB	AT,17,0,"   CHINESE NINJA."		DB	STOP		LD	BC,#0108		LD	A,4		CALL	A_FACE		RETLIZ_BIO		CALL	PRINTF		;                01234567890123456789		DB	AT,8,4,"SONYA BLADE"		DB	AT,10,0," SONYA IS A MEMBER"		DB	AT,11,0,"OF A TOP U.S SPECIAL"		DB	AT,12,0,"   FORCES UNIT IN"		DB	AT,13,0,"  PERSUIT  OF KANO."		DB	STOP		LD	BC,#0108		LD	A,5		CALL	A_FACE		RETGORO_BIO	CALL	PRINTF		;                01234567890123456789		DB	AT,8,8,"GORO"		DB	AT,11,0,"A 2000 YEAR OLD HALF"		DB	AT,12,0," HUMAN DRAGON GORO" 		DB	AT,13,0," REMAINS UNDEFEATED" 		DB	AT,14,0,"  FOR THE PAST 500" 		DB	AT,15,0,"      YEARS.."		DB	STOP		LD	BC,#0108		LD	A,6		CALL	A_FACE		RET*****************************************       PRINT LINK DISCONNECTED****************************************SHOW_DISCONNECT		LD	SP,STACK		XOR	A		LD	(CONNECT),A		LD	(CHANSEL),A		LD	(INKEYS),A		CALL	PAL_OFF		CALL	INIT_INTRO_SCR		CALL	CLS		CALL	SET_CHR_BOX		CALL	SET_FACES		CALL	CHR_BLACK		CALL	PRINTF		;                01234567890123456789		DB	BOX,6,0,6,20		DB	AT,07,1,"      ERROR" 		DB	AT,09,1," LINK DISCONNECTED" 		DB	AT,10,1,"  RESTARTING GAME" 		DB	STOP		CALL	FADE_IN		LD	A,4		CALL	PLAY_MUSIC		LD	BC,200		CALL	NO_LINK_WAIT		LD	A,(MASTER)		AND	A		JP	Z,@NO			CALL	RANDOM		CALL	RANDOM		CALL	RANDOM@NO		XOR	A		LD	(KEYS),A		LD	(INKEYS),A		CALL	FADE_OUT		JP	ATTRACT_ENTRY*****************************************       PRINT LINK DISCONNECTED****************************************SHOW_CONNECTED		LD	SP,STACK		CALL	PAL_OFF		CALL	INIT_INTRO_SCR		CALL	CLS		CALL	SET_CHR_BOX		CALL	SET_FACES		CALL	CHR_BLACK		CALL	PRINTF		;                01234567890123456789		DB	BOX,6,0,6,20		DB	AT,08,1," LINK ESTABLISHED" 		DB	AT,09,1," YOU ARE PLAYER "		DB	STOP		LD	A,(MASTER)		AND	#01		XOR	#01		;INVERT PLAYER NUM		ADD	A,"1"		CALL	FCHAR		CALL	FADE_IN		XOR	A		LD	(CHANSEL),A		LD	A,4		CALL	PLAY_MUSIC		XOR	A		LD	(SEED),A		LD	BC,200		CALL	ATT_PAUSE		CALL	FADE_OUT		JP	ATTRACT_ENTRY*****************************************	    VERSES SCREEN****************************************SHOW_VERSES	CALL	SET_CHR_BOX		CALL	CHR_BLACK		CALL	SET_FACES		CALL	PRINTF		DB	BOX,05,03,7,6		DB	BOX,05,11,7,6		DB	AT,1,3,""		DB	AT,2,5,"PLAYER "		DB	STOP		RET*****************************************	    VERSES SCREEN****************************************SHOW_SELECT	CALL	INIT_INTRO_SCR		CALL	SET_CHR_BOX		CALL	CHR_BLACK		CALL	SET_FACES		CALL	PRINTF		DB	BOX,0,0,18,20		;BOX ALL		DB	BOX,03,01,7,6		DB	BOX,03,07,7,6		DB	BOX,03,13,7,6		DB	BOX,10,01,7,6		DB	BOX,10,07,7,6		DB	BOX,10,13,7,6		DB	AT,1,4,"CHOOSE YOUR"		DB	AT,2,2,"FIGHTER PLAYER "		DB	STOP		LD	A,(WHICHSEL)		ADD	A,"1"		CALL	FCHAR		CALL	PR_ALL_FACE		CALL	FADE_IN		XOR	A		LD	(SELPOS),A@WAIT		LD	HL,TIME			;WAIT FOR START TO BE		INC	(HL)			;RELEASED		CALL	GETKEYS		CALL	LINK_AND_FLY		CALL	DODOWN		CALL	SEL_FACE		CALL	GET_SEL_KEYS		BIT	3,A		JP	NZ,@WAIT@LOOP		LD	HL,TIME		INC	(HL)		CALL	GETKEYS		CALL	LINK_AND_FLY		CALL	DODOWN		CALL	SEL_FACE		CALL	MOVE_SEL		CALL	GET_SEL_KEYS		BIT	3,A		JP	Z,@LOOP		CALL	FADE_OUT		LD	A,(SELPOS)		;REAL PLAYER NUMBER		INC	A		RET*****************************************	   GET SELECTS KEYS****************************************GET_SEL_KEYS	LD	A,(CONNECT)		AND	A		JP	Z,@KEYS		LD	A,(WHICHSEL)		AND	A		JP	NZ,@SECOND@FIRST		LD	A,(MASTER)	;IF 1ST SEL AND MASTER		AND	A		JP	NZ,@KEYS		JP	@INKEYS@SECOND		LD	A,(MASTER)	;IF 1ST SEL AND MASTER		AND	A		JP	Z,@KEYS		JP	@INKEYS@KEYS		LD	A,(KEYS)		RET@INKEYS		LD	A,(INKEYS)		RET*****************************************	    MOVE SEL MARKER****************************************MOVE_SEL	LD	HL,SELPOS		CALL	GET_SEL_KEYS		BIT	7,A		JP	NZ,@DW		BIT	6,A		JP	NZ,@UP		BIT	5,A		JP	NZ,@LT		BIT	4,A		JP	NZ,@RT		RET@UP		LD	A,(HL)		SUB	3		RET	C		CALL	PR_SEL_FACE	;PUT FACE BACK		LD	(HL),A		JP	@WAIT@DW		LD	A,(HL)		ADD	A,3		CP	6		RET	NC		CALL	PR_SEL_FACE	;PUT FACE BACK		LD	(HL),A		JP	@WAIT@LT		LD	A,(HL)		DEC	A		CP	#FF		RET	Z		CALL	PR_SEL_FACE	;PUT FACE BACK		LD	(HL),A		JP	@WAIT@RT		LD	A,(HL)		INC	A		CP	6		RET	NC		CALL	PR_SEL_FACE	;PUT FACE BACK		LD	(HL),A@WAIT		LD	B,32@LOOP		PUSH	BC		LD	HL,TIME		INC	(HL)		CALL	LINK_AND_FLY		CALL	GETKEYS		CALL	DODOWN		CALL	SEL_FACE		POP	BC		CALL	GET_SEL_KEYS		BIT	3,A		RET	NZ		AND	#F0		RET	Z		DJNZ	@LOOP		RET		*****************************************           ALWAYS PRINT A FACE****************************************PR_SEL_FACE	PUSH	AF		LD	A,(TIME)	;MAKE SURE FACE PRINTED		OR	16		LD	(TIME),A		PUSH	HL		CALL	SEL_FACE		POP	HL		POP	AF		RET*****************************************	    PRINT ALL FACES****************************************PR_ALL_FACE	LD	L,6		XOR	A	   	@LOOP		LD	(SELPOS),A				CALL	PR_SEL_FACE     		INC	A				DEC	L		JP	NZ,@LOOP		RET*****************************************	    HIGHLIGHT A FACE****************************************SELBOXES	DB	0,0,0		DB	04,02,0		DB	04,08,1		DB	04,14,2		DB	11,02,3		DB	11,08,4		DB	11,14,5SEL_FACE	LD	A,(SELPOS)		CP	7		RET	NC		INC	A		LD	C,A		;A*3		ADD	A,A		ADD	A,C		LD	C,A		LD	B,0		LD	HL,SELBOXES		ADD	HL,BC		LD	B,(HL)		INC	HL		LD	C,(HL)		INC	HL			LD	DE,#0504		LD	A,(TIME)		AND	16		JP	Z,DEL_BOX		LD	A,(HLI)		CALL	A_FACE		RET*****************************************           PRINT FORMAT****************************************PRINTF		POP	HL@LOOP		LD	A,(HL)		CP	STOP		JP	Z,@END		CP	AT		JP	Z,@AT				CP	BOX		JP	Z,@DOBOX		PUSH	HL		CALL	PRCHR		POP	HL		INC	HL		JP	@LOOP@DOBOX		INC	HL		LD	B,(HL)		INC	HL		LD	C,(HL)		INC	HL		LD	D,(HL)		INC	HL		LD	E,(HL)		INC	HL		PUSH	HL		CALL	DISP_BOX		POP	HL		JP	@LOOP@AT		INC	HL		LD	B,(HL)		INC	HL		LD	C,(HL)		INC	HL		PUSH	HL		CALL	SETPOS		POP	HL		JP	@LOOP		@END		INC	HL		JP	(HL)*****************************************	      BOX PRINTER*	      ~~~~~~~~~~~*	     BC = XY COORD*	 D = HIGHT : E = WIDTH****************************************DISP_BOX	DEC	E		;WIDTH - 2		DEC	E		DEC	D		DEC	D		LD	H,BOXSTART		LD	L,BOXSTART+1		LD	A,BOXSTART+2		PUSH	DE		CALL	BOX_STRIP		POP	DE		INC	B		;NEXT Y@LOOP		LD	H,BOXSTART+3		LD	L,BOXSTART+4		LD	A,BOXSTART+5		PUSH	DE		CALL	BOX_STRIP		POP	DE		INC	B		DEC	D		JP	NZ,@LOOP		LD	H,BOXSTART+6		LD	L,BOXSTART+7		LD	A,BOXSTART+8		CALL	BOX_STRIP		RET*****************************************	      REMOVE BOX*	      ~~~~~~~~~~*	     BC = XY COORD*	 D = HIGHT : E = WIDTH****************************************DEL_BOX		DEC	E		;WIDTH - 2		DEC	E		DEC	D		DEC	D		LD	H,BOXSTART+4		LD	L,BOXSTART+4		LD	A,BOXSTART+4		PUSH	DE		CALL	BOX_STRIP		POP	DE		INC	B		;NEXT Y@LOOP		LD	H,BOXSTART+4		LD	L,BOXSTART+4		LD	A,BOXSTART+4		PUSH	DE		CALL	BOX_STRIP		POP	DE		INC	B		DEC	D		JP	NZ,@LOOP		LD	H,BOXSTART+4		LD	L,BOXSTART+4		LD	A,BOXSTART+4		CALL	BOX_STRIP		RET*****************************************	   PRINT A BOX STRIP****************************************BOX_STRIP	PUSH	BC		;SAVE COORDS		PUSH	AF		;SAVE RIGHT EDGE		PUSH	HL		;SAVE LEFT EDGE		PUSH	DE		;SAVE COUNT		CALL	SETPOS		POP	DE    		;GET COUNT		POP	HL		;GET EDGES		LD	A,H		;? LEFT EDGE		CALL	CHAR@LOOP		LD	A,L 		;? MID		CALL	CHAR     		DEC	E		JP	NZ,@LOOP	;E - 2 TIMES		POP	AF		;? RIGHT EDGE		CALL	CHAR				POP	BC		;GET COORDS		RET*****************************************	   SET CHR POSITION****************************************SETPOS		LD	L,B		LD	H,0		ADD	HL,HL		ADD	HL,HL		ADD	HL,HL		ADD	HL,HL		ADD	HL,HL		LD	B,0		ADD	HL,BC		LD	BC,#9800		ADD	HL,BC				LD	A,L		LD	(SCRADD),A		LD	A,H		LD	(SCRADD+1),A		RET*****************************************	   PRINT A CHR ON MAP****************************************PRCHR		CALL	CONV_CHR		CALL	WAIT_STAT		LD	HL,SCRADD		LD	E,(HL)		INC	HL		LD	D,(HL)		LD  	(DE),A 		INC	DE		LD	(HL),D		DEC	HL		LD	(HL),E		RET*****************************************	   PRINT A CHR ON MAP****************************************SPACE		LD	A,32FCHAR		CALL	CONV_CHRCHAR		PUSH	HL		PUSH	DE		PUSH	BC		CALL	WAIT_STAT		LD	HL,SCRADD		LD	E,(HL)		INC	HL		LD	D,(HL)		LD  	(DE),A 		INC	DE		LD	(HL),D		DEC	HL		LD	(HL),E		POP	BC		POP	DE		POP	HL		RET*****************************************      DISPLAY A COMPRESSED SCREEN*      ~~~~~~~~~~~~~~~~~~~~~~~~~~~*    HL POINTS TO COMPRESSED CHRDATA*    DE POINTS TO COMPRESSED MAPDATA****************************************SHOW_COMPRESSED_PIC		PUSH	DE		LD	DE,#8000+16*50	;PUT AT END OF CHRSET		CALL	UNPACK		POP	HL		LD	DE,MAPRAM		CALL	UNPACK		LD	HL,#9800		LD	DE,MAPRAM		LD	B,18@MAIN		PUSH	BC		PUSH	HL		LD	C,20@LOOP		CALL	WAIT1		LD	A,(DE)		ADD	A,50		;SKIP OVER CHRSET		LD	(HLI),A		INC	DE		DEC	C		JP	NZ,@LOOP		POP	HL		LD	BC,32		;NEXT SCREEN LINE		ADD	HL,BC		POP	BC		DEC	B		JP	NZ,@MAIN				RET*****************************************      DISPLAY A COMPRESSED SCREEN*      ~~~~~~~~~~~~~~~~~~~~~~~~~~~*    HL POINTS TO COMPRESSED CHRDATA*    DE POINTS TO COMPRESSED MAPDATA****************************************SHOW_SCR_0		PUSH	DE		LD	DE,#8000	;PUT AT END OF CHRSET		CALL	UNPACK		POP	HL		LD	DE,MAPRAM		CALL	UNPACK		LD	HL,#9800		LD	DE,MAPRAM		LD	B,18@MAIN		PUSH	BC		PUSH	HL		LD	C,20@LOOP		CALL	WAIT1		LD	A,(DE)		LD	(HLI),A		INC	DE		DEC	C		JP	NZ,@LOOP		POP	HL		LD	BC,32		;NEXT SCREEN LINE		ADD	HL,BC		POP	BC		DEC	B		JP	NZ,@MAIN				RET*****************************************  DECOMPRESS CHRS AND BOXES INTO VDP****************************************SET_CHR_BOX	LD	A,1		SETBANK		LD	HL,CHRS_AND_BOXES		LD	DE,#8000		CALL	UNPACK		RET*****************************************  DECOMPRESS CHRS AND BOXES INTO VDP****************************************SET_FACES	LD	A,1		SETBANK		LD	HL,FACES_CHR		LD	DE,#8000+16*50		;END OF CHRS		CALL	UNPACK		LD	HL,PLAN_CHR		;AND BATTLE PLAN CHRS AS WELL		CALL	UNPACK		LD	HL,FACES_MAP		LD	DE,MAPRAM		CALL	UNPACK		RET*****************************************    ADD BACKGROUND COLOR TO CHRSET*	D = VALUE TO ADD PLANE 1*	E = VALUE TO ADD PLANE 2****************************************BOXSTART	EQU	26+13		;START OF BOX DATACHR_BLACK		LD	HL,#8000		LD	BC,8*BOXSTART		@LOOP	      	CALL	WAIT1		XOR	A		LD	(HLI),A			LD	A,(HL)		CPL		LD	E,A		CALL	WAIT1		LD	A,#FF		AND	E		LD	(HLI),A			DEC	BC		LD	A,B		OR	C		JP	NZ,@LOOP		RET*****************************************	      WAIT BC FRAMES****************************************ATT_PAUSE@LOOP		PUSH	BC		CALL	GETKEYS		CALL	LINK_AND_FLY		CALL	DODOWN		POP	BC		DEC	BC		LD	A,B		OR	C		JP	NZ,@LOOP		RET*****************************************	      WAIT BC FRAMES****************************************ATT_BRK_PAUSE@LOOP		PUSH	BC		CALL	GETKEYS		CALL	LINK_AND_FLY		CALL	DODOWN		POP	BC		DEC	BC		LD	A,B		OR	C		JP	NZ,@LOOP		RET*****************************************	      WAIT BC FRAMES****************************************ATT_WAIT@LOOP		PUSH	BC		CALL	GETKEYS		CALL	LINK_AND_FLY		CALL	DODOWN		CALL	TESTSTART		POP	BC		DEC	BC		LD	A,B		OR	C		JP	NZ,@LOOP		RETNO_LINK_WAIT@LOOP		PUSH	BC		CALL	WAIT_FLY		CALL	GETKEYS		CALL	DODOWN		POP	BC		LD	A,(KEYS)		;LETS YOU SKIP LEGALS AN		BIT	2,A			;LOGO'S		RET	NZ		DEC	BC		LD	A,B		OR	C		JP	NZ,@LOOP		RET*****************************************  WAIT BC FRAMES AND CALL SUB PROCESS****************************************CALL_WAIT@LOOP		PUSH	BC		PUSH	HL		CALL	GETKEYS		CALL	LINK_AND_FLY		CALL	DODOWN		CALL	TESTSTART		POP	HL		PUSH	HL		LD	DE,@RETADD		PUSH	DE		JP	(HL)		@RETADD		POP	HL		POP	BC		DEC	BC		LD	A,B		OR	C		JP	NZ,@LOOP		RET*****************************************         DO FLY AND HANDLE LINK****************************************LINK_AND_FLY	CALL	WAIT_FLY		JP	HANDLE_LINK*****************************************	     TEST FOR START****************************************TESTSTART	LD	A,(KEYS)		BIT	3,A		JP	NZ,@START		LD	A,(INKEYS)		BIT	3,A		RET	Z@START		CALL	FADE_OUT		CALL	CLS		LD	SP,STACK		JP	STARTGAME*****************************************	     PRINT A NUMBER*        C = START POS IN PANEL****************************************FNUM5		LD	DE,-10000		CALL	FDIGITFNUM4		LD	DE,-1000		CALL	FDIGITFNUM3		LD	DE,-100		CALL	FDIGITFNUM2		LD	DE,-10		CALL	FDIGITFNUM1		LD	A,L		CALL	FPRDIG		RET*****************************************	   PRINT A DIGIT****************************************FDIGIT		XOR	A@LOOP		INC	A		ADD	HL,DE		JP	C,@LOOP		PUSH	AF		LD	A,L		SUB	E		LD	L,A		LD	A,H		SBC	A,D		LD	H,A								POP	AF		DEC	AFPRDIG		ADD	A,48		CALL	FCHAR		RET*****************************************	      SHOW CREDITS****************************************SHOW_CREDITS 	CALL	CLS		CALL	INIT_INTRO_SCR		CALL	SET_CHR_BOX		LD	HL,GAMECRED_MAP		;THIS IS A BIG MAP		LD	DE,MAPRAM		CALL	UNPACK		CALL	CLR_OBJECTS		CALL	SET_DMA_TRANS		;TRANFER SPRITE DATA		LD	HL,24		CALL	PR_PLAN		CALL	FADE_IN		LD	BC,50		CALL	ATT_PAUSE		DI		LD	BC,8*93		LD	HL,24	@LOOP		PUSH	HL		PUSH	BC		CALL	WAIT_FLY2		CALL	PR_PLAN		CALL	GETKEYS		CALL	DODOWN		CALL	WAIT_FLY2		CALL	DO_MUSIC		CALL	DO_MUSIC		CALL	WAIT_FLY2		CALL	DO_MUSIC		POP	BC		POP	HL		INC	HL		DEC	BC		LD	A,B		OR	C		JP	NZ,@LOOP		EI		LD	A,3			;PLAY GAME OVER		CALL	PLAY_MUSIC		LD	BC,300		CALL	ATT_PAUSE		CALL	FADE_OUT		RET*****************************************	    SET BATTLE POS****************************************BATPLANSTART	EQU	50+154SET_BATTLE_POS	LD	HL,BP_POS		LD	DE,656		LD	(HL),E		INC	HL		LD	(HL),D		LD	A,8*14		LD	(FACE_Y),A		XOR	A		LD	(CUR_MAP_POS),A		LD	(MAP_POSITION),A	      	RET	*****************************************	   SHOW BATTLE PLAN* WILL SCROLL TO PLAYERS NEXT POSITION*  EITHER ADVANCING OR DEMOTING HIM*	    (MAP_POSITION)****************************************SHOW_BATTLE_PLAN		LD	A,1		CALL	PLAY_MUSIC		CALL	INIT_INTRO_SCR		CALL	SET_MAP_MOVE			CALL	CLS		CALL	SET_CHR_BOX		CALL	CHR_BLACK		CALL	SET_FACES		LD	HL,PLAN_MAP		;THIS IS A BIG MAP		LD	DE,MAPRAM		CALL	UNPACK		LD	HL,FACES_MAP		;GET FACE MAPS		LD	DE,CHRDATA		CALL	UNPACK		CALL	BATTLE_PLAN_SET		LD	A,#FF		LD	(OBP1),A		CALL	CLR_OBJECTS		CALL	SET_FACE_SPR		CALL	SET_DMA_TRANS		;TRANFER SPRITE DATA		CALL	WAIT_FLY		 		LD	HL,BP_POS		LD	A,(HLI)		LD	H,(HL)		LD	L,A		CALL	PR_PLAN		CALL	FADE_IN		LD	A,#FF		LD	(OBP1),A		LD	BC,50		CALL	ATT_PAUSE		DI@LOOP		CALL	WAIT_FLY2			CALL	CLR_OBJECTS		CALL	SET_FACE_SPR		CALL	WAIT_FLY2		CALL	DMA_TRANSFER		;TRANFER SPRITE DATA		LD	HL,BP_POS		LD	A,(HLI)		LD	H,(HL)		LD	L,A		CALL	PR_PLAN		CALL	DO_MUSIC		CALL	DO_MUSIC		CALL	MOVE_MAP		CALL	GETKEYS		CALL	DODOWN		LD	A,(BP_MOVE) 		LD	L,A		LD	A,(BP_MOVE+1)		OR	L		JP	Z,@PAUSE		JP	@LOOP@PAUSE		EI		CALL	WAIT_FLY		CALL	CLR_OBJECTS		CALL	SET_FACE_SPR		CALL	SET_DMA_TRANS		;TRANFER SPRITE DATA		CALL	WAIT_FLY		LD	HL,BP_POS		LD	A,(HLI)		LD	H,(HL)		LD	L,A		CALL	PR_PLAN@WAIT		CALL	GETKEYS			;WAIT FOR START		LD	A,(KEYS)     		BIT	3,A		JP	Z,@WAIT		CALL	FADE_OUT		RET*****************************************          MOVE FACE TO MAP POS****************************************SLIDE_TABLE	DB	7,7,7,7,7,14,11,11,10,7CAMEO_TABLE	DB	94,87,80,73,66,59,45,34,23,13,6SET_MAP_MOVE	LD	A,(MAP_POSITION)		LD	C,A		LD	B,0		LD	HL,CAMEO_TABLE		ADD	HL,BC		LD	E,(HL)		LD	A,(CUR_MAP_POS)		LD	C,A		LD	B,0		LD	HL,CAMEO_TABLE		ADD	HL,BC		LD	A,(HL)		SUB	E		RET	Z			;RET IF SAME		LD	E,A			;DIFF IN E		RLA		SBC	A,A		SLA	E			;GET AMOUT TO MOVE IN PIXELS		RL	A		SLA	E		RL	A		SLA	E		RL	A		LD	(BP_MOVE+1),A		;STUFF THIS IN MOVEMENT		LD	A,E		LD	(BP_MOVE),A		LD	A,(MAP_POSITION)	;MAKE MAP POS SAME		LD	(CUR_MAP_POS),A		RET*****************************************		MOVE MAP****************************************MOVE_MAP	LD	HL,BP_MOVE		LD	E,(HL)		INC	HL		LD	D,(HL)		LD	A,D		OR	E		RET	Z		BIT	7,D		JP	NZ,@DOWN		DEC	DE		LD	(HL),D		DEC	HL		LD	(HL),E		JP	MAPUP@DOWN		INC	DE		LD	(HL),D		DEC	HL		LD	(HL),E		JP	MAPDOWN*****************************************	    MOVE MAP FACE DOWN****************************************MAPDOWN		LD	A,(BP_POS)		LD	L,A				LD	A,(BP_POS+1)		LD	H,A		LD	A,(FACE_Y)		LD	B,A		CALL	INC_WIN		LD	A,B		LD	(FACE_Y),A		LD	A,H		LD	(BP_POS+1),A		LD	A,L		LD	(BP_POS),A     		RET*****************************************	    MOVE MAP FACE DOWN****************************************MAPUP		LD	A,(BP_POS)		LD	L,A				LD	A,(BP_POS+1)		LD	H,A		LD	A,(FACE_Y)		LD	B,A		CALL	DEC_WIN		LD	A,B		LD	(FACE_Y),A		LD	A,H		LD	(BP_POS+1),A		LD	A,L		LD	(BP_POS),A		RET*****************************************	    SET UP FACE SPRITE****************************************SET_FACE_SPR	LD	A,(BASE0)		DEC	A  		;GET FACE POS		ADD	A,A		;2		ADD	A,A		;4		LD	E,A		;E = *4		ADD	A,A		;5*E		ADD	A,A		ADD	A,E		    		LD	E,A		LD	D,0			LD	HL,CHRDATA		ADD	HL,DE		;HL = CAMEO TOP LEFT		LD	A,(FACE_Y)		LD	B,A		LD	C,12				LD	D,5@OUTLOOP	PUSH	BC		LD	E,4@LOOP				LD	A,%00001111		LD	(OBJFLAGS),A		LD	A,(HLI)		ADD	A,50		CALL	PUT_OBJ		LD	A,%00011111		LD	(OBJFLAGS),A		LD	A,BOXSTART+4		CALL	PUT_OBJ		LD	A,C		ADD	A,8		LD	C,A		DEC	E		JP	NZ,@LOOP		POP	BC		LD	A,B		ADD	A,8		LD	B,A		DEC	D		JP	NZ,@OUTLOOP		LD	A,%00001111		LD	(OBJFLAGS),A		RET*****************************************          SET WINDOW A COORD* 	       HL = COORD**OUT:	        B = Y COORD*	       HL = WINDOW POS****************************************DEC_WIN		LD	DE,8		CALL	CMP_HL_DE		JP	NC,@ADDSPR		LD	A,B		CP	8*8		JP	NC,@ADDSPR		DEC	HL		RET@ADDSPR		DEC	B		;Y = Y - 1		RETINC_WIN		LD	DE,656		CALL	CMP_HL_DE		JP	C,@ADDSPR		LD	A,B		CP	8*8		JP	C,@ADDSPR		INC	HL		RET@ADDSPR		INC	B		RET*****************************************        SET UP BATTLE PLAN MAP****************************************BATTLE_PLAN_SET		LD	HL,MAPRAM		;CORRECT MAP		LD	BC,100*20@SET		LD	A,(HL)		ADD	A,BATPLANSTART		LD	(HLI),A		DEC	BC		LD	A,B		OR	C		JP	NZ,@SET;PLACE TEXT AND FACES		LD	B,H			;BC = BOTTOM OF MAP RAM		LD	C,L		DEC	BC		LD	DE,PLANLIST		LD	A,(MAPRAM)		;GET FLAG CHR		LD	L,A@LOOP  		LD	A,(DE)			;IS THIS THE LAST COMMAND		AND	A		RET	Z@LP		LD	A,(BC)			;SEARCH FOR L		CP	L		JP	Z,@GOTONE		DEC	BC			;GET OLD HL		JP	@LP@GOTONE		DEC	BC			;LOOK ONE MORE		LD	A,(BC)			;IS THIS ANOTHER MARKER		INC	BC		CP	L			;IF IT ISNT THEN CAMEO		JP	NZ,@FACE;PRINT SOME TEXT		DEC	BC			;GO TO FIRST MARKER		PUSH	HL		PUSH	DE		PUSH	BC    			;SAVE COMMAND LIST		LD	A,(DE)		CALL	FINDNAME		;GET NAME TEXT AT HL		LD	E,(HL)			;GET COUNT		INC	HL			ld	a,e			;center text		cp	8		jp	nc,@nocenter		ld	a,8		sub	e		srl	a		jp	z,@nocenter		ld	d,a		xor	a			;space@nloop		ld	(bc),a		inc	bc		dec	d		jp	nz,@nloop@nocenter@NAMELOOP	LD	A,(HLI)			;COPY NAME TO BC		CALL	CONV_CHR		LD	(BC),A		INC	BC		DEC	E		JP	NZ,@NAMELOOP		POP	BC		POP	DE			;GET COMMAND LIST		POP	HL		DEC	BC		INC	DE		JP	@LOOP;PRINT A FACE		@FACE		PUSH	HL		;SAVE SEARCH BYTE		PUSH	DE		;SAVE COMMAND LIST		PUSH	BC		;SAVE CURRENT MAP POSITION		LD	A,(DE)		RES	7,A		DEC	A  		;GET FACE POS		ADD	A,A		;2		ADD	A,A		;4		LD	E,A		;E = *4		ADD	A,A		;5*E		ADD	A,A		ADD	A,E		    		LD	E,A		LD	D,0			LD	HL,CHRDATA		ADD	HL,DE		;HL = CAMEO TOP LEFT		LD	E,5@FLOOP		LD	A,(HLI)		ADD	A,50		LD	(BC),A		INC	BC		LD	A,(HLI)		ADD	A,50		LD	(BC),A		INC	BC		LD	A,(HLI)		ADD	A,50		LD	(BC),A		INC	BC		LD	A,(HLI)		ADD	A,50		LD	(BC),A		INC	BC		LD	A,C		ADD	A,16		LD	C,A		JP	NC,@NC1		INC	B@NC1		DEC	E		JP	NZ,@FLOOP		POP	BC		POP	DE		POP	HL		DEC	BC		INC	DE		JP	@LOOP*****************************************	PRINT BATTLE PLAN SCREEN*	  HL = YPOS IN PIXELS****************************************PR_PLAN		LD	A,L    			;SET UP PIX POS		AND	7		LD	(SCY),A		SRL	H		RR	L			SRL	H		RR	L			SRL	H		RR	L			ADD	HL,HL		PUSH	HL		ADD	HL,HL		ADD	HL,HL		POP	DE		ADD	HL,DE			;X 10		ADD	HL,HL			;X 20   		LD	DE,MAPRAM		ADD	HL,DE		LD	DE,#9800			LD	C,19			;LEAVE ROOM FOR PANEL WAS 18@MAIN		PUSH	BC		LD	C,10@INLOOP		CALL	WAIT1		LD	A,(HLI)		LD	(DE),A		INC	DE		LD	A,(HLI)		LD	(DE),A		INC	DE		DEC	C		JP	NZ,@INLOOP		LD	A,E		ADD	A,32-20		LD	E,A		JP	NC,@NOINC		INC	D@NOINC		POP	BC		DEC	C		JP	NZ,@MAIN		RET		*****************************************       GENERATE ENEMYS TABLE****************************************ENEMIES		DB	0			;0 CAGE_ENEMIES		DB	%1111100		;1 KANO_ENEMIES		DB	%1111010		;2 RAIDEN_ENEMIES		DB	%1110110		;3 KANG_ENEMIES		DB	%1101110		;4 SCORPION_ENEMIES		DB	%1011110		;5 SUBZERO_ENEMIES		DB	%0111110		;6 LIZ_ENEMIES		DB	%1111110		;7 GORO		DB	%1111110		;8 LIZ_ENEMIES;			 |||||||_CAGE ;			 ||||||__KANO;			 |||||___RAIDEN;			 ||||____KANG;			 |||_____SCORPION;			 ||______SUBZERO;			 |_______LIZ     MAKE_BATTLE_PLAN		CALL	RES_PLAN_PTR		LD	A,(BASE0)		LD	C,A				LD	B,0		LD	HL,ENEMIES		ADD	HL,BC		LD	C,(HL)			;NME MASK		LD	A,C		LDZ	(REGX),A		LD	HL,ENEMY_TAB		;GET FIRST 6 NME'S		LD	B,5@LOOP1		CALL	FIND_AN_NME		;FIND AN NME		LD	(HLI),A		CALL	PUT_PLAN		CALL	PUT_PLAN     		DJNZ	@LOOP1		LD	A,(BASE0)		;PUT MIRROR MATCH		LD	(HLI),A		PUSH	AF		LD	A,11			;MIRROR		CALL	PUT_PLAN		LD	A,12			;MATCH		CALL	PUT_PLAN		POP	AF		CALL	PUT_PLAN		LD	A,9			;MATCHES		CALL	PUT_PLAN		LDZ	A,(REGX)		LD	C,A			;ALL PLAYERS EXCEPT ME		CALL	PUT_PAIR		;PUT 1ST PAIR		CALL	PUT_PAIR		;PUT 2ST PAIR		CALL	PUT_PAIR_SPEC		;PUT 3ST PAIR		LD	A,10			;PAIRS		CALL	PUT_PLAN		LD	A,_GORO			;PUT GORO		LD	(HLI),A		LD	A,_EMP			;PUT EMP		LD	(HLI),A		LD	A,#FF			;PUT END OF GAME MARK		LD	(HLI),A		LD	A,_GORO		CALL	PUT_PLAN		CALL	PUT_PLAN		LD	A,_EMP		CALL	PUT_PLAN		CALL	PUT_PLAN		LD	A,13			;BATTLE PLAN		CALL	PUT_PLAN		XOR	A		CALL	PUT_PLAN		RET*****************************************     PUT A PAIR IN BATTLE PLAN****************************************PUT_PAIR	CALL	FIND_AN_NME		;FIND AN NME		LD	E,A		CALL	FIND_AN_NME		;FIND AN NME		LD	D,A		RLCA		RLCA		RLCA		RLCA		OR	E		LD	(HLI),A			;PUT PAIR				LD	A,E		CALL	PUT_PLAN		LD	A,D		CALL	PUT_PLAN		LD	A,E		CALL	PUT_PLAN		LD	A,D		CALL	PUT_PLAN		RET*****************************************     PUT A PAIR IN BATTLE PLAN****************************************PUT_PAIR_SPEC	CALL	FIND_AN_NME		;FIND AN NME		LD	E,A		LDZ	A,(REGX)		LD	C,A			;ALL PLAYERS EXCEPT ME@ANOTHER	CALL	FIND_AN_NME		;FIND AN NME		LD	D,A		CP	E			;IF PLAY0 = PLAY1 GET ANOTHER		JP	Z,@ANOTHER		LD	A,D		RLCA		RLCA		RLCA		RLCA		OR	E		LD	(HLI),A			;PUT PAIR				LD	A,E		CALL	PUT_PLAN		LD	A,D		CALL	PUT_PLAN		LD	A,E		CALL	PUT_PLAN		LD	A,D		CALL	PUT_PLAN		RET*****************************************            FIND AN ENEMY*         C = SELECTION MASK****************************************FIND_AN_NME	LD	A,C		;IF NOTHING TO SELECT		AND	A		;RETURN		RET	Z		PUSH	HL		;SAVE ALL		PUSH	DE		PUSH	BC@NEXT		CALL	RANDOM		;GET RND 0 - 7		AND	7		LD	E,A		;IN DE		LD	D,0		LD	HL,MASKS	;GET MASK		ADD	HL,DE		LD	B,(HL)		;IN B				LD	A,C		AND	B		JP	Z,@NEXT		LD	A,B		;GET MASKOUT BIT		CPL		LD	B,A		LD	A,C		;MASK OUT THIS BIT FROM C		AND	B		LDZ	(REG1),A	;SAVE NEW C		LD	A,E		LDZ	(REG2),A	;SAVE BIT NUMBER			POP	BC 		;RESTORE ALL		POP	DE		POP	HL		LDZ	A,(REG1)	;PUT NEW MASK		LD	C,A		LDZ	A,(REG2)	;RETURN WITH BIT NUM		RET*****************************************        RESET PLAN POINTER LIST****************************************RES_PLAN_PTR	LD	HL,PLAN_PTR		LD	DE,PLANLIST		LD	(HL),E		INC	HL		LD	(HL),D		RET*****************************************       PUT A BYTE TO PLAN LIST****************************************PUT_PLAN	PUSH	HL		PUSH	DE		LD	HL,PLAN_PTR		LD	E,(HL)		INC	HL		LD	D,(HL)		LD	(DE),A		INC	DE		LD	(HL),D		DEC	HL		LD	(HL),E		POP	DE		POP	HL		RET*********************************************************************************			   SCORING STUFF*************************************************************************************************************************	 ADD SCORES TO PLAYERS****************************************ADD_PLAY_1	LD	DE,PLAY_1_SCORE		JP	SCORE_AADD_PLAY_2	LD	DE,PLAY_2_SCORE		JP	SCORE_A*****************************************	      CLEAR SCORES****************************************CLEAR_SCORES	XOR	A		LD	HL,PLAY_1_SCORE		LD	(HLI),A		LD	(HLI),A		LD	(HLI),A		LD	(HLI),A		LD	HL,PLAY_2_SCORE		LD	(HLI),A		LD	(HLI),A		LD	(HLI),A		LD	(HLI),A		RET*****************************************	    ADD SCORE BYTES*	    ~~~~~~~~~~~~~~~*	DE = ADDRESS OF SCORE*	     A = ADD AMOUNT****************************************S100		BCD	00,00,01,00	S200		BCD	00,00,02,00	S500		BCD	00,00,05,00	S1000		BCD	00,00,10,00	S2000		BCD	00,00,20,00	S5000		BCD	00,00,50,00	S10000		BCD	00,01,00,00	S20000		BCD	00,02,00,00	S50000		BCD	00,05,00,00	S100000		BCD	00,10,00,00	S200000		BCD	00,20,00,00	S500000		BCD	00,50,00,00	S1000000	BCD	01,00,00,00	SCORE_A		AND	A		;IF 0 NO SCORE		RET	Z		DEC	A		;ALINE SCORE		ADD	A,A		;GET CORRECT SCORE POINTER		ADD	A,A		LD	C,A		LD	B,0		LD	HL,S100		ADD	HL,BC		JP	ADD_SCORE*****************************************	      ADD SCORE*	      ~~~~~~~~~*	   DE = SCORE DATA*	   HL = ADD DATA****************************************ADD_SCORE	LD	A,(DE)		ADD	A,(HL)		DAA		LD	(DE),A		PUSH	AF		INC	DE		INC	HL			POP	AF		LD	A,(DE)		ADC	A,(HL)		DAA		LD	(DE),A		PUSH	AF		INC	DE		INC	HL			POP	AF		LD	A,(DE)		ADC	A,(HL)		DAA		LD	(DE),A		PUSH	AF		INC	DE		INC	HL			POP	AF		LD	A,(DE)		ADC	A,(HL)		DAA		LD	(DE),A		RET